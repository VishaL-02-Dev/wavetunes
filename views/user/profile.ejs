<head>
    <title>
        WaveTunes | Profile
    </title>
</head>
<%- include("partials/user/header") %>

    <body>
        <div class="container mx-auto px-4 py-8">
            <div class="max-w-3xl mx-auto">
                <!-- Profile Header -->
                <div class="bg-gray-900 text-white rounded-lg shadow-lg p-6 mb-6">
                    <div class="flex items-center space-x-4">
                        <div class="bg-blue-600 rounded-full p-4">
                            <i class="fa-solid fa-user-circle text-white text-4xl"></i>
                        </div>
                        <div>
                            <h1 class="text-2xl font-semibold">
                                <%= user.fname %>
                                    <%= user.lname %>
                            </h1>
                            <p class="text-gray-300">
                                <%= user.email %>
                            </p>
                        </div>
                    </div>
                </div>

                <!-- Profile Details -->
                <div class="bg-gray-900 text-white rounded-lg shadow-lg overflow-hidden">
                    <!-- Tabs -->
                    <div class="flex border-b border-gray-700">
                        <button class="tab-button px-6 py-3 text-blue-400 border-b-2 border-blue-400 font-medium"
                            data-tab="personal-info">
                            Personal Information
                        </button>
                        <button class="tab-button px-6 py-3 text-gray-400 hover:text-white font-medium"
                            data-tab="orders">
                            Order History
                        </button>
                        <button class="tab-button px-6 py-3 text-gray-400 hover:text-white font-medium"
                            data-tab="settings">
                            Account Settings
                        </button>
                    </div>

                    <!-- Personal Info Tab -->
                    <div class="tab-content p-6 active" id="personal-info">
                        <div class="grid md:grid-cols-2 gap-6">
                            <div class="space-y-4">
                                <div>
                                    <h3 class="text-sm font-medium text-gray-400">First Name</h3>
                                    <p class="mt-1">
                                        <%= user.fname %>
                                    </p>
                                </div>
                                <div>
                                    <h3 class="text-sm font-medium text-gray-400">Last Name</h3>
                                    <p class="mt-1">
                                        <%= user.lname %>
                                    </p>
                                </div>
                                <div>
                                    <h3 class="text-sm font-medium text-gray-400">Email Address</h3>
                                    <p class="mt-1">
                                        <%= user.email %>
                                    </p>
                                </div>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <h3 class="text-sm font-medium text-gray-400">Phone Number</h3>
                                    <p class="mt-1">
                                        <%= user.phone || 'Not provided' %>
                                    </p>
                                </div>
                                <div>
                                    <h3 class="text-sm font-medium text-gray-400">Member Since</h3>
                                    <p class="mt-1">
                                        <%= new Date(user.createdAt).toLocaleDateString() %>
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Addresses Section -->
                        <div class="mt-8 border-t border-gray-700 pt-6">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-medium">Your Addresses</h3>
                                <button id="add-address-btn" class="text-blue-400 hover:text-blue-300">
                                    <i class="fas fa-plus-circle mr-1"></i> Add New Address
                                </button>
                            </div>

                            <div id="addresses-container" class="space-y-4">
                                <% if (user.address && user.addresses.length> 0) { %>
                                    <% user.addresses.forEach((address, index)=> { %>
                                        <div class="border border-gray-700 rounded-lg p-4 relative">
                                            <% if (address.isDefault) { %>
                                                <span
                                                    class="absolute top-2 right-2 bg-blue-600 text-xs px-2 py-1 rounded-full">Default</span>
                                                <% } %>
                                                    <div class="flex justify-between">
                                                        <div>
                                                            <p class="font-medium">
                                                                <%= address.name %>
                                                            </p>
                                                            <p class="text-gray-400 mt-1">
                                                                <%= address.street %>
                                                            </p>
                                                            <p class="text-gray-400">
                                                                <%= address.city %>, <%= address.state %>
                                                                        <%= address.PinCode %>
                                                            </p>
                                                            <p class="text-gray-400">Phone: <%= address.phone %>
                                                            </p>
                                                        </div>
                                                        <div class="flex flex-col space-y-2">
                                                            <button
                                                                class="edit-address-btn text-blue-400 hover:text-blue-300 text-sm"
                                                                data-index="<%= index %>">
                                                                <i class="fas fa-edit mr-1"></i> Edit
                                                            </button>
                                                            <% if (!address.isDefault) { %>
                                                                <button
                                                                    class="set-default-btn text-green-400 hover:text-green-300 text-sm"
                                                                    data-index="<%= index %>">
                                                                    <i class="fas fa-check-circle mr-1"></i> Set as
                                                                    Default
                                                                </button>
                                                                <% } %>
                                                                    <button
                                                                        class="delete-address-btn text-red-400 hover:text-red-300 text-sm"
                                                                        data-index="<%= index %>">
                                                                        <i class="fas fa-trash mr-1"></i> Delete
                                                                    </button>
                                                        </div>
                                                    </div>
                                        </div>
                                        <% }); %>
                                            <% } else { %>
                                                <div class="text-center py-6 border border-gray-700 rounded-lg">
                                                    <i class="fas fa-map-marker-alt text-gray-600 text-3xl mb-2"></i>
                                                    <p class="text-gray-400">You haven't added any addresses yet.</p>
                                                </div>
                                                <% } %>
                            </div>
                        </div>

                        <div class="mt-6">
                            <button id="edit-profile-btn"
                                class="inline-block py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded text-white font-semibold">
                                Edit Profile
                            </button>
                        </div>
                    </div>

                    <!-- Orders Tab -->


                    <!-- Settings Tab -->
                    <div class="tab-content p-6 hidden" id="settings">
                        <div class="space-y-6">
                            <div>
                                <h3 class="text-lg font-medium mb-3">Change Password</h3>
                                <form id="change-password-form" class="space-y-4">
                                    <div>
                                        <label for="current-password" class="block text-sm font-medium">Current
                                            Password</label>
                                        <input type="password" id="current-password" name="currentPassword"
                                            class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                                    </div>
                                    <div>
                                        <label for="new-password" class="block text-sm font-medium">New Password</label>
                                        <input type="password" id="new-password" name="newPassword"
                                            class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                                    </div>
                                    <div>
                                        <label for="confirm-password" class="block text-sm font-medium">Confirm New
                                            Password</label>
                                        <input type="password" id="confirm-password" name="confirmPassword"
                                            class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                                    </div>
                                    <button type="submit"
                                        class="py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded text-white font-semibold">
                                        Update Password
                                    </button>
                                </form>
                            </div>

                            <div class="pt-4 border-t border-gray-700">
                                <h3 class="text-lg font-medium mb-3">Account Actions</h3>
                                <div class="space-y-3">
                                    <button id="deactivate-account" class="text-yellow-500 hover:text-yellow-400">
                                        <i class="fas fa-user-slash mr-2"></i> Deactivate Account
                                    </button>
                                    <div class="block">
                                        <button id="delete-account" class="text-red-500 hover:text-red-400">
                                            <i class="fas fa-trash-alt mr-2"></i> Delete Account
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Profile Modal -->
        <div id="edit-profile-modal"
            class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
            <div class="bg-gray-900 text-white rounded-lg shadow-lg max-w-md w-full mx-4">
                <div class="flex justify-between items-center border-b border-gray-700 p-4">
                    <h3 class="text-xl font-semibold">Edit Profile</h3>
                    <button id="close-modal" class="text-gray-400 hover:text-white">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="edit-profile-form" class="p-6 space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="edit-fname" class="block text-sm font-medium">First Name</label>
                            <input type="text" id="edit-fname" name="fname" value="<%= user.fname %>"
                                class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                        </div>
                        <div>
                            <label for="edit-lname" class="block text-sm font-medium">Last Name</label>
                            <input type="text" id="edit-lname" name="lname" value="<%= user.lname %>"
                                class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                        </div>
                    </div>
                    <div>
                        <label for="edit-email" class="block text-sm font-medium">Email Address</label>
                        <input type="email" id="edit-email" name="email" value="<%= user.email %>"
                            class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                    </div>
                    <div>
                        <label for="edit-phone" class="block text-sm font-medium">Phone Number</label>
                        <input type="tel" id="edit-phone" name="phone" value="<%= user.phone || '' %>"
                            class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                    </div>
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" id="cancel-edit"
                            class="py-2 px-4 bg-gray-700 hover:bg-gray-600 rounded text-white font-medium">
                            Cancel
                        </button>
                        <button type="submit"
                            class="py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded text-white font-semibold">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Address Modal (Add/Edit) -->
        <div id="address-modal"
            class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
            <div class="bg-gray-900 text-white rounded-lg shadow-lg max-w-md w-full mx-4">
                <div class="flex justify-between items-center border-b border-gray-700 p-4">
                    <h3 id="address-modal-title" class="text-xl font-semibold">Add New Address</h3>
                    <button id="close-address-modal" class="text-gray-400 hover:text-white">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="address-form" class="p-6 space-y-4">
                    <input type="hidden" id="address-index" value="-1">
                    <div>
                        <label for="address-name" class="block text-sm font-medium">Address Type (e.g. Home,
                            Work)</label>
                        <select id="address-name" name="name"
                            class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                            <option value="" disabled selected>Select Address Type</option>
                            <option value="home">Home</option>
                            <option value="work">Work</option>
                        </select>
                    </div>
                    <div>
                        <label for="address-street" class="block text-sm font-medium">Address</label>
                        <textarea id="address-street" name="street"
                            class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                    </textarea>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="address-city" class="block text-sm font-medium">City</label>
                            <input type="text" id="address-city" name="city"
                                class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                        </div>
                        <div>
                            <label for="address-state" class="block text-sm font-medium">State</label>
                            <input type="text" id="address-state" name="state"
                                class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                        </div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="address-zip" class="block text-sm font-medium">PIN Code</label>
                            <input type="text" id="address-zip" name="zipCode"
                                class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                        </div>
                        <div>
                            <label for="address-phone" class="block text-sm font-medium">Phone</label>
                            <input type="tel" id="address-phone" name="phone"
                                class="w-full p-2 mt-1 bg-gray-800 rounded border border-gray-600 focus:outline-none focus:border-blue-400">
                        </div>
                    </div>
                    <div class="flex items-center space-x-2 mt-4">
                        <input type="checkbox" id="address-default" name="isDefault"
                            class="h-4 w-4 bg-gray-800 border-gray-600 rounded focus:ring-blue-500">
                        <label for="address-default" class="text-sm font-medium">Set as default delivery address</label>
                    </div>
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" id="cancel-address"
                            class="py-2 px-4 bg-gray-700 hover:bg-gray-600 rounded text-white font-medium">
                            Cancel
                        </button>
                        <button type="submit" id="save-address-btn"
                            class="py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded text-white font-semibold">
                            Save Address
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                // Tab navigation
                const tabButtons = document.querySelectorAll('.tab-button');
                const tabContents = document.querySelectorAll('.tab-content');

                tabButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        // Remove active class from all buttons and contents
                        tabButtons.forEach(btn => {
                            btn.classList.remove('text-blue-400', 'border-b-2', 'border-blue-400');
                            btn.classList.add('text-gray-400');
                        });
                        tabContents.forEach(content => {
                            content.classList.add('hidden');
                            content.classList.remove('active');
                        });

                        // Add active class to clicked button and corresponding content
                        button.classList.add('text-blue-400', 'border-b-2', 'border-blue-400');
                        button.classList.remove('text-gray-400');
                        const tabId = button.getAttribute('data-tab');
                        const activeContent = document.getElementById(tabId);
                        activeContent.classList.remove('hidden');
                        activeContent.classList.add('active');
                    });
                });

                // Change password form
                const changePasswordForm = document.getElementById('change-password-form');
                if (changePasswordForm) {
                    changePasswordForm.addEventListener('submit', async function (e) {
                        e.preventDefault();

                        const currentPassword = document.getElementById('current-password').value;
                        const newPassword = document.getElementById('new-password').value;
                        const confirmPassword = document.getElementById('confirm-password').value;

                        if (newPassword !== confirmPassword) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'New passwords do not match',
                                icon: 'error'
                            });
                            return;
                        }

                        try {
                            const response = await fetch('/user/change-password', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    currentPassword,
                                    newPassword
                                })
                            });

                            const data = await response.json();

                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Password has been updated',
                                    icon: 'success'
                                });
                                changePasswordForm.reset();
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Something went wrong',
                                    icon: 'error'
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Something went wrong',
                                icon: 'error'
                            });
                        }
                    });
                }

                // Account deactivation
                const deactivateButton = document.getElementById('deactivate-account');
                if (deactivateButton) {
                    deactivateButton.addEventListener('click', function () {
                        Swal.fire({
                            title: 'Deactivate Account?',
                            text: 'Your account will be temporarily disabled. You can reactivate it by logging in again.',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, deactivate it',
                            cancelButtonText: 'Cancel'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Add API call for deactivation here
                                fetch('/user/deactivate', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            Swal.fire(
                                                'Deactivated!',
                                                'Your account has been deactivated.',
                                                'success'
                                            ).then(() => {
                                                window.location.href = '/logout';
                                            });
                                        } else {
                                            Swal.fire(
                                                'Error!',
                                                data.message || 'Failed to deactivate account',
                                                'error'
                                            );
                                        }
                                    })
                                    .catch(error => {
                                        Swal.fire(
                                            'Error!',
                                            'Something went wrong',
                                            'error'
                                        );
                                    });
                            }
                        });
                    });
                }

                // Account deletion
                const deleteButton = document.getElementById('delete-account');
                if (deleteButton) {
                    deleteButton.addEventListener('click', function () {
                        Swal.fire({
                            title: 'Delete Account?',
                            text: 'This action cannot be undone. All your data will be permanently deleted.',
                            icon: 'error',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, delete it',
                            confirmButtonColor: '#d33',
                            cancelButtonText: 'Cancel'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                fetch('/user/delete', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            Swal.fire(
                                                'Deleted!',
                                                'Your account has been deleted.',
                                                'success'
                                            ).then(() => {
                                                window.location.href = '/';
                                            });
                                        } else {
                                            Swal.fire(
                                                'Error!',
                                                data.message || 'Failed to delete account',
                                                'error'
                                            );
                                        }
                                    })
                                    .catch(error => {
                                        Swal.fire(
                                            'Error!',
                                            'Something went wrong',
                                            'error'
                                        );
                                    });
                            }
                        });
                    });
                }

                // Edit Profile Modal
                const editProfileBtn = document.getElementById('edit-profile-btn');
                const editProfileModal = document.getElementById('edit-profile-modal');
                const closeModalBtn = document.getElementById('close-modal');
                const cancelEditBtn = document.getElementById('cancel-edit');
                const editProfileForm = document.getElementById('edit-profile-form');

                function openModal() {
                    editProfileModal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden'; // Prevent scrolling
                }

                function closeModal() {
                    editProfileModal.classList.add('hidden');
                    document.body.style.overflow = 'auto'; // Enable scrolling
                }

                editProfileBtn.addEventListener('click', openModal);
                closeModalBtn.addEventListener('click', closeModal);
                cancelEditBtn.addEventListener('click', closeModal);

                // Close modal when clicking outside of it
                editProfileModal.addEventListener('click', function (e) {
                    if (e.target === editProfileModal) {
                        closeModal();
                    }
                });

                // Edit Profile Form Submission
                if (editProfileForm) {
                    editProfileForm.addEventListener('submit', async function (e) {
                        e.preventDefault();

                        const formData = {
                            fname: document.getElementById('edit-fname').value,
                            lname: document.getElementById('edit-lname').value,
                            email: document.getElementById('edit-email').value,
                            phone: document.getElementById('edit-phone').value
                        };

                        try {
                            const response = await fetch('/user/update-profile', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(formData)
                            });

                            const data = await response.json();

                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Profile has been updated',
                                    icon: 'success'
                                }).then(() => {
                                    window.location.reload(); // Refresh page to show updated info
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Something went wrong',
                                    icon: 'error'
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Something went wrong',
                                icon: 'error'
                            });
                        }
                    });
                }

                // Address Management
                let userAddresses = `<%= JSON.stringify(user.address || []) %>`;

                // Address Modal
                const addressModal = document.getElementById('address-modal');
                const addressModalTitle = document.getElementById('address-modal-title');
                const closeAddressModalBtn = document.getElementById('close-address-modal');
                const cancelAddressBtn = document.getElementById('cancel-address');
                const addAddressBtn = document.getElementById('add-address-btn');
                const addressForm = document.getElementById('address-form');
                const addressIndexInput = document.getElementById('address-index');

                function openAddressModal(isEdit = false, index = -1) {
                    addressModal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden';

                    if (isEdit && index >= 0) {
                        addressModalTitle.textContent = 'Edit Address';
                        const address = userAddresses[index];

                        // Fill form with address data
                        addressIndexInput.value = index;
                        document.getElementById('address-name').value = address.name || '';
                        document.getElementById('address-street').value = address.street || '';
                        document.getElementById('address-city').value = address.city || '';
                        document.getElementById('address-state').value = address.state || '';
                        document.getElementById('address-zip').value = address.zipCode || '';
                        document.getElementById('address-phone').value = address.phone || '';
                        document.getElementById('address-default').checked = address.isDefault || false;
                    } else {
                        addressModalTitle.textContent = 'Add New Address';
                        addressIndexInput.value = -1;
                        addressForm.reset();
                        // If no addresses exist, set as default by default
                        document.getElementById('address-default').checked = userAddresses.length === 0;
                    }
                }

                function closeAddressModal() {
                    addressModal.classList.add('hidden');
                    document.body.style.overflow = 'auto';
                    addressForm.reset();
                }

                addAddressBtn.addEventListener('click', () => openAddressModal(false));
                closeAddressModalBtn.addEventListener('click', closeAddressModal);
                cancelAddressBtn.addEventListener('click', closeAddressModal);

                // Close modal when clicking outside of it
                addressModal.addEventListener('click', function (e) {
                    if (e.target === addressModal) {
                        closeAddressModal();
                    }
                });

                // Handle edit address button clicks
                document.addEventListener('click', function (e) {
                    if (e.target.closest('.edit-address-btn')) {
                        const index = parseInt(e.target.closest('.edit-address-btn').getAttribute('data-index'));
                        openAddressModal(true, index);
                    }
                });

                // Handle set as default address button clicks
                document.addEventListener('click', function (e) {
                    if (e.target.closest('.set-default-btn')) {
                        const index = parseInt(e.target.closest('.set-default-btn').getAttribute('data-index'));
                        setDefaultAddress(index);
                    }
                });

                // Handle delete address button clicks
                document.addEventListener('click', function (e) {
                    if (e.target.closest('.delete-address-btn')) {
                        const index = parseInt(e.target.closest('.delete-address-btn').getAttribute('data-index'));
                        deleteAddress(index);
                    }
                });

                // Address Form Submission
                if (addressForm) {
                    addressForm.addEventListener('submit', async function (e) {
                        e.preventDefault();

                        const index = parseInt(addressIndexInput.value);
                        const isDefault = document.getElementById('address-default').checked;

                        // Create address object from form
                        const addressData = {
                            name: document.getElementById('address-name').value,
                            street: document.getElementById('address-street').value,
                            city: document.getElementById('address-city').value,
                            state: document.getElementById('address-state').value,
                            zipCode: document.getElementById('address-zip').value,
                            phone: document.getElementById('address-phone').value,
                            isDefault: isDefault
                        };

                        // If address is set as default, update other addresses
                        if (isDefault) {
                            userAddresses.forEach(addr => addr.isDefault = false);
                        }

                        // If editing existing address
                        if (index >= 0) {
                            userAddresses[index] = addressData;
                        } else {
                            // If adding new address
                            userAddresses.push(addressData);
                        }

                        try {
                            const response = await fetch('/user/update-addresses', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ addresses: userAddresses })
                            });

                            const data = await response.json();

                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Address has been saved',
                                    icon: 'success'
                                }).then(() => {
                                    window.location.reload(); // Refresh to show updated addresses
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Failed to save address',
                                    icon: 'error'
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Something went wrong',
                                icon: 'error'
                            });
                        }

                        closeAddressModal();
                    });
                }

                // Function to set default address
                async function setDefaultAddress(index) {
                    if (index >= 0 && index < userAddresses.length) {
                        // Update local data
                        userAddresses.forEach((addr, i) => {
                            addr.isDefault = (i === index);
                        });

                        try {
                            const response = await fetch('/user/update-addresses', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ addresses: userAddresses })
                            });

                            const data = await response.json();

                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Default address has been updated',
                                    icon: 'success'
                                }).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Failed to update default address',
                                    icon: 'error'
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Something went wrong',
                                icon: 'error'
                            });
                        }
                    }
                }

                // Function to delete address
                async function deleteAddress(index) {
                    if (index >= 0 && index < userAddresses.length) {
                        Swal.fire({
                            title: 'Delete Address?',
                            text: 'Are you sure you want to delete this address?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, delete it',
                            cancelButtonText: 'Cancel'
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                // Remove address from local array
                                userAddresses.splice(index, 1);

                                try {
                                    const response = await fetch('/user/update-addresses', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({ addresses: userAddresses })
                                    });

                                    const data = await response.json();

                                    if (data.success) {
                                        Swal.fire({
                                            title: 'Deleted!',
                                            text: 'Address has been deleted',
                                            icon: 'success'
                                        }).then(() => {
                                            window.location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Error!',
                                            text: data.message || 'Failed to delete address',
                                            icon: 'error'
                                        });
                                    }
                                } catch (error) {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'Something went wrong',
                                        icon: 'error'
                                    });
                                }
                            }
                        });
                    }
                }

                // Ensure the first tab is active by default if none is active
                if (!document.querySelector('.tab-content.active:not(.hidden)')) {
                    const firstTab = document.querySelector('.tab-button');
                    if (firstTab) {
                        firstTab.click();
                    }
                }
            });
        </script>

        <%- include("partials/user/footer") %>