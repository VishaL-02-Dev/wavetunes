<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification - WaveTune</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-gradient-to-br from-black to-gray-100 min-h-screen flex justify-center items-center text-white">

    <div class="bg-black bg-opacity-80 p-8 rounded-lg shadow-lg max-w-sm w-full text-center">
        <h2 class="text-2xl text-cyan-400 mb-2">
            <%= context==='passwordReset' ? "Reset Your Password" : "Verify Your Email" %>
        </h2>
        <p class="text-sm text-gray-300 mb-5">
            <%= context==='passwordReset' ? "A 6-digit OTP has been sent to your email to reset your password."
                : "A 6-digit OTP has been sent to your email to verify your account." %>
        </p>

        <div class="flex justify-center gap-2 mb-5">
            <input type="text" maxlength="1"
                class="otp-field w-12 h-12 text-2xl text-center border-2 border-cyan-400 rounded-md bg-transparent focus:border-blue-400 focus:ring-2 focus:ring-blue-400 focus:outline-none">
            <input type="text" maxlength="1"
                class="otp-field w-12 h-12 text-2xl text-center border-2 border-cyan-400 rounded-md bg-transparent focus:border-blue-400 focus:ring-2 focus:ring-blue-400 focus:outline-none">
            <input type="text" maxlength="1"
                class="otp-field w-12 h-12 text-2xl text-center border-2 border-cyan-400 rounded-md bg-transparent focus:border-blue-400 focus:ring-2 focus:ring-blue-400 focus:outline-none">
            <input type="text" maxlength="1"
                class="otp-field w-12 h-12 text-2xl text-center border-2 border-cyan-400 rounded-md bg-transparent focus:border-blue-400 focus:ring-2 focus:ring-blue-400 focus:outline-none">
            <input type="text" maxlength="1"
                class="otp-field w-12 h-12 text-2xl text-center border-2 border-cyan-400 rounded-md bg-transparent focus:border-blue-400 focus:ring-2 focus:ring-blue-400 focus:outline-none">
            <input type="text" maxlength="1"
                class="otp-field w-12 h-12 text-2xl text-center border-2 border-cyan-400 rounded-md bg-transparent focus:border-blue-400 focus:ring-2 focus:ring-blue-400 focus:outline-none">
        </div>

        <button
            class="verify-btn bg-blue-400 text-white py-3 w-full rounded-lg cursor-pointer text-lg transition ease-in-out duration-300 hover:bg-navy-500">Verify
            OTP</button>

        <p class="text-sm text-gray-300 mt-5">Resend OTP in <span id="timer">60</span> seconds</p>
        <button id="resend-otp"
            class="bg-red-400 text-white-400 py-2 w-full rounded-md cursor-not-allowed text-sm transition ease-in-out duration-300 hover:bg-green-500 hover:text-white">Resend
            OTP</button>
    </div>

    <script>
        const context = "<%= context %>";

        document.addEventListener("DOMContentLoaded", async function () {
            const otpFields = document.querySelectorAll(".otp-field");
            const verifyBtn = document.querySelector(".verify-btn");
            const resendBtn = document.getElementById("resend-otp");
            const timerDisplay = document.getElementById("timer");

            let timer = 60;
            let countdown;

            otpFields.forEach((field, index) => {
                field.addEventListener("input", (e) => {
                    if (e.target.value && index < otpFields.length - 1) {
                        otpFields[index + 1].focus();
                    }
                });

                field.addEventListener("keydown", (e) => {
                    if (e.key === "Backspace" && !e.target.value && index > 0) {
                        otpFields[index - 1].focus();
                    }
                });
            });

            function getOtpValue() {
                return Array.from(otpFields)
                    .map(input => input.value)
                    .join("");
            }

            verifyBtn.addEventListener("click", async function () {
                const otp = getOtpValue();
                console.log("Entered OTP:", otp);

                if (otp.length !== 6) {
                    Swal.fire("Error", "Please enter a 6-digit OTP", "error");
                    return;
                }

                try {
                    const userData = JSON.parse(sessionStorage.getItem('pendingData'));
                    console.log("Retrieved userData", userData);

                    if (context === 'passwordReset') {
                        let response = await fetch("/user/verifyResetOtp", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ otp, userData }),
                        });

                        let result = await response.json();
                        console.log("OTP Verification Response:", result);

                        if (result.success) {
                            sessionStorage.removeItem('pendingData');
                            Swal.fire("Success", "OTP Verified Successfully!", "success", 2000).then(() => {
                                window.location.href = result.redirectUrl;
                            });
                        } else {
                            otpFields.forEach(field => field.value = "");
                            otpFields[0].focus();
                            Swal.fire("Error", result.message || "Invalid OTP", "error");
                        }
                    }
                    else {
                        let response = await fetch("/user/otpverify", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ otp, userData, context }),
                        });

                        let result = await response.json();
                        console.log("OTP Verification Response:", result);

                        if (result.success) {
                            sessionStorage.removeItem('pendingData');
                            Swal.fire("Success", "OTP Verified Successfully!", "success", 2000).then(() => {
                                window.location.href = result.redirectUrl;
                            });
                        } else {
                            otpFields.forEach(field => field.value = "");
                            otpFields[0].focus();
                            Swal.fire("Error", result.message || "Invalid OTP", "error");
                        }
                    }

                } catch (error) {
                    console.error("Error verifying OTP:", error);
                    Swal.fire("Error", "Something went wrong, try again", "error");
                }
            });

            resendBtn.addEventListener("click", async function () {
                // const storedData = sessionStorage.getItem('pendingData');

                // if (!storedData) {  // Check if null
                //     console.log("No user data found in session storage");
                //     Swal.fire('Error', "Session expired. Please sign up again.", 'error');
                //     return;
                // }

                try {
                    // const userData = JSON.parse(storedData);  // Parse only if valid
                    // console.log("Resending OTP for user: ", userData);

                    let response = await fetch("/user/otpverify/resendotp", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        // body: JSON.stringify(userData)
                    });

                    let result = await response.json();
                    console.log("Resend OTP Response:", result);

                    if (result.success) {
                        Swal.fire("Success", "New OTP sent!", "success");
                        timer = 60;
                        timerDisplay.textContent = timer;
                        startTimer();
                    } else {
                        Swal.fire("Error", result.message || "Failed to resend OTP", "error");
                    }

                } catch (error) {
                    console.error("Error resending OTP:", error);
                    Swal.fire("Error", "Something went wrong, try again", "error");
                }
            });

            function startTimer() {
                resendBtn.disabled = true;
                resendBtn.classList.remove("active");
                resendBtn.style.cursor = "not-allowed";

                countdown = setInterval(() => {
                    timer--;
                    timerDisplay.textContent = timer;

                    if (timer === 0) {
                        clearInterval(countdown);
                        resendBtn.disabled = false;
                        resendBtn.classList.add("active");
                        resendBtn.style.cursor = "pointer";
                        timerDisplay.textContent = "0";
                    }
                }, 1000);
            }

            startTimer();


        });
    </script>
</body>

</html>