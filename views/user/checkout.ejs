<head>
    <title>Checkout | WaveTunes</title>
    <%- include('./partials/user/header') %>
        <style>
            .checkout-section {
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }

            .checkout-section:hover {
                transform: scale(1.01);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

            .address-card {
                border: 2px solid #e5e7eb;
                border-radius: 0.5rem;
                padding: 1rem;
                margin-bottom: 1rem;
                cursor: pointer;
                transition: border-color 0.2s ease;
            }

            .address-card.selected {
                border-color: #3B82F6;
                background-color: #EFF6FF;
            }

            .address-card:hover {
                border-color: #93C5FD;
            }

            .address-badge {
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
                border-radius: 9999px;
                font-weight: 500;
            }

            .badge-default {
                background-color: #10B981;
                color: white;
            }

            .badge-home {
                background-color: #3B82F6;
                color: white;
            }

            .badge-work {
                background-color: #6366F1;
                color: white;
            }

            .badge-other {
                background-color: #8B5CF6;
                color: white;
            }
            .strikethrough {
            text-decoration: line-through;
            color: #6b7280; 
            font-size: 0.875rem; 
            }
        </style>
</head>

<body>
    <div class="container mx-auto px-4 py-8">
        <nav class="mb-8" aria-label="Breadcrumb">
            <ol class="flex text-sm">
                <li><a href="/" class="text-white hover:text-blue-700">Home</a></li>
                <li class="mx-2 text-white">/</li>
                <li><a href="/user/cart" class="text-white hover:text-blue-700">My Cart</a></li>
                <li class="mx-2 text-white">/</li>
                <li class="text-white font-medium">Checkout</li>
            </ol>
        </nav>

        <h1 class="text-3xl font-bold mb-8 text-white">Checkout</h1>

        <form id="checkout-form" method="POST" action="/user/placeOrder">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Left Column - Shipping & Payment -->
                <div class="lg:col-span-2 space-y-6">
                    <!-- Shipping Information -->
                    <div class="bg-white rounded-lg shadow-md p-6 checkout-section">
                        <h2 class="text-2xl font-semibold mb-6 text-gray-800">Shipping Information</h2>

                        <!-- Saved Addresses Section -->
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-4 text-gray-700">Saved Addresses</h3>

                            <!-- Check if user has saved addresses -->
                            <% if (addresses && addresses.length> 0) { %>
                                <div id="saved-addresses">
                                    <% addresses.forEach(function(address) { %>
                                        <div class="address-card <%= address.isDefault ? 'selected' : '' %>"
                                            data-address-id="<%= address._id %>">
                                            <div class="flex justify-between items-start mb-2">
                                                <div class="flex space-x-2">
                                                    <input type="radio" name="addressId" value="<%= address._id %>"
                                                        <%=address.isDefault ? 'checked' : '' %>
                                                    class="mt-1 w-4 h-4 text-blue-600 focus:ring-blue-500">
                                                    <div>
                                                        <div class="flex items-center">
                                                            <span class="font-medium">
                                                                <%= address.addressType %>
                                                            </span>
                                                            <% if (address.isDefault) { %>
                                                                <span
                                                                    class="ml-2 address-badge badge-default">Default</span>
                                                                <% } %>
                                                                    <span
                                                                        class="ml-2 address-badge badge-<%= address.addressType.toLowerCase() %>">
                                                                        <%= address.addressType %>
                                                                    </span>
                                                        </div>
                                                        <p class="text-sm text-gray-600">
                                                            <%= address.address %>
                                                        </p>
                                                        <p class="text-sm text-gray-600">
                                                            <%= address.city %>, <%= address.district %>, <%=
                                                                        address.state %> - <%= address.pinCode %>
                                                        </p>
                                                        <p class="text-sm text-gray-600">Phone: <%= address.phone %>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                </div>
                                <button type="button" id="add-new-address"
                                    class="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center mt-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none"
                                        viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M12 4v16m8-8H4" />
                                    </svg>
                                    Add New Address
                                </button>
                                <% } else { %>
                                    <div class="text-gray-600 mb-4">You don't have any saved addresses yet.</div>
                                    <% } %>
                        </div>

                        <!-- New Address Form (Initially hidden if addresses exist) -->
                        <div id="new-address-form" class="<%= addresses && addresses.length > 0 ? 'hidden' : '' %>">
                            <h3 class="text-lg font-medium mb-4 text-gray-700">Add New Address</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="md:col-span-2">
                                    <label for="address" class="block text-sm font-medium text-gray-700 mb-1">Street
                                        Address</label>
                                    <input type="text" id="address" name="address"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
                                    <input type="text" id="city" name="city"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="district"
                                        class="block text-sm font-medium text-gray-700 mb-1">District</label>
                                    <input type="text" id="district" name="district"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="state"
                                        class="block text-sm font-medium text-gray-700 mb-1">State/Province</label>
                                    <input type="text" id="state" name="state"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="pinCode" class="block text-sm font-medium text-gray-700 mb-1">PIN/Postal
                                        Code</label>
                                    <input type="text" id="pinCode" name="pinCode"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone
                                        Number</label>
                                    <input type="text" id="phone" name="phone"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="addressType"
                                        class="block text-sm font-medium text-gray-700 mb-1">Address Type</label>
                                    <select id="addressType" name="addressType"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="Home">Home</option>
                                        <option value="Work">Work</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="setDefault" name="isDefault"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="setDefault" class="ml-2 text-sm text-gray-700">Set as default
                                        address</label>
                                </div>
                            </div>

                            <div class="flex mt-4 space-x-4">
                                <button type="button" id="save-address"
                                    class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition">
                                    Save Address
                                </button>
                                <% if (addresses && addresses.length> 0) { %>
                                    <button type="button" id="cancel-address"
                                        class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-md transition">
                                        Cancel
                                    </button>
                                    <% } %>
                            </div>
                        </div>
                    </div>

                    <!-- Payment Information -->
                    <div class="bg-white rounded-lg shadow-md p-6 checkout-section">
                        <h2 class="text-2xl font-semibold mb-6 text-gray-800">Payment Method</h2>
                        <div class="space-y-4">
                            <div class="flex space-x-4 mb-6">
                                <div class="flex items-center">
                                    <input type="radio" id="credit-card" name="paymentMethod" value="creditCard" checked
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="credit-card" class="ml-2 text-gray-700">Credit Card</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="radio" id="razorpay" name="paymentMethod" value="razorpay"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="razorpay" class="ml-2 text-gray-700">Razorpay</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="radio" id="cod" name="paymentMethod" value="cod"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="cod" class="ml-2 text-gray-700">Cash on Delivery</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="radio" id="wallet" name="paymentMethod" value="wallet"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="wallet" class="ml-2 text-gray-700">Wallet</label>
                                </div>
                            </div>

                            <div id="credit-card-form">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div class="md:col-span-2">
                                        <label for="cardNumber"
                                            class="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
                                        <input type="text" id="cardNumber" name="cardNumber"
                                            placeholder="1234 5678 9012 3456"
                                            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    </div>
                                    <div>
                                        <label for="cardName" class="block text-sm font-medium text-gray-700 mb-1">Name
                                            on Card</label>
                                        <input type="text" id="cardName" name="cardName"
                                            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    </div>
                                    <div class="grid grid-cols-2 gap-4">
                                        <div>
                                            <label for="expiry"
                                                class="block text-sm font-medium text-gray-700 mb-1">Expiry
                                                (MM/YY)</label>
                                            <input type="text" id="expiry" name="expiry" placeholder="MM/YY"
                                                class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        </div>
                                        <div>
                                            <label for="cvv"
                                                class="block text-sm font-medium text-gray-700 mb-1">CVV</label>
                                            <input type="text" id="cvv" name="cvv" placeholder="123"
                                                class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="razorpay-form" class="hidden">
                                <p class="text-gray-700">You will be redirected to Razorpay to complete your payment
                                    securely.</p>
                            </div>
                            <div id="wallet-form" class="hidden">
                                <div class="border border-gray-200 rounded-lg p-4 bg-gray-50">
                                    <div class="flex justify-between items-center mb-4">
                                        <div>
                                            <h3 class="text-lg font-medium text-gray-800">Wallet Balance</h3>
                                            <p class="text-gray-600" id="wallet-balance">₹<span
                                                    id="available-balance">0.00</span></p>
                                        </div>
                                        <a href="/user/wallet"
                                            class="text-blue-600 hover:text-blue-800 font-medium text-sm">
                                            Add Money
                                        </a>
                                    </div>

                                    <div id="insufficient-funds" class="hidden text-red-600 text-sm mb-4">
                                        <div class="flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1"
                                                viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd"
                                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                            Insufficient funds in your wallet. Please add money or choose a different
                                            payment method.
                                        </div>
                                    </div>

                                    <div id="sufficient-funds" class="hidden text-green-600 text-sm mb-4">
                                        <div class="flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1"
                                                viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd"
                                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                            You have sufficient balance to complete this purchase.
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="cod-form" class="hidden">
                                <p class="text-gray-700">Pay at the time of delivery.</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column - Order Summary -->
                <div class="bg-white rounded-lg shadow-md p-6 sticky top-6 checkout-section">
                    <h2 class="text-2xl font-semibold mb-6 text-gray-800">Order Summary</h2>
                    <div class="space-y-4 mb-4">
                        <% if (cart && cart.items && cart.items.length> 0) { %>
                            <% cart.items.forEach(function(item) { %>
                                <div class="flex justify-between border-b border-gray-200 pb-2">
                                    <div class="flex items-center">
                                        <span class="text-gray-700 font-medium">
                                            <%= item.quantity %>x
                                        </span>
                                        <span class="ml-2 text-gray-700 truncate max-w-[180px]">
                                            <%= item.product.name %>
                                        </span>
                                    </div>
                                    <div class="text-right">
                                        <% if (item.product.offerPercentage> 0) { %>
                                            <span class="font-medium">
                                                ₹<%= ((item.product.price * (1 - item.product.offerPercentage / 100)) *
                                                    item.quantity).toFixed(2) %>
                                            </span>
                                            <span class="strikethrough block ">
                                                ₹<%= (item.product.price * item.quantity).toFixed(2) %>
                                            </span>
                                            <span class="offer-percentage block text-green-600">
                                                <%= item.product.offerPercentage %>% off
                                            </span>
                                            <% } else { %>
                                                <span class="font-medium">
                                                    ₹<%= (item.product.price * item.quantity).toFixed(2) %>
                                                </span>
                                                <% } %>
                                    </div>
                                </div>
                                <% }); %>
                                    <% } %>
                                        <div class="space-y-2" id="order-summary">
                                            <div class="flex justify-between">
                                                <span class="text-gray-700">Subtotal</span>
                                                <span class="font-medium">₹<%= cart.subtotal.toFixed(2) %></span>
                                            </div>
                                            <div id="discount-row" class="flex justify-between hidden">
                                                <span class="text-green-600">Discount (<span
                                                        id="coupon-code-display"></span>)</span>
                                                <div class="flex items-center space-x-2">
                                                    <span class="font-medium text-green-600"
                                                        id="discount-amount"></span>
                                                    <button type="button" id="remove-coupon"
                                                        class="text-red-600 hover:text-red-800 text-sm font-medium">
                                                        Remove
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="flex justify-between">
                                                <span class="text-gray-700">Shipping</span>
                                                <span class="font-medium">₹<%= cart.shipping.toFixed(2) %></span>
                                            </div>
                                            <div class="flex justify-between">
                                                <span class="text-gray-700">Tax</span>
                                                <span class="font-medium">₹<%= cart.tax.toFixed(2) %></span>
                                            </div>
                                            <hr class="border-gray-200">
                                            <div class="flex justify-between text-xl font-bold">
                                                <span>Total</span>
                                                <span id="total-amount">₹<%= cart.total.toFixed(2) %></span>
                                            </div>
                                        </div>
                    </div>

                    <div class="mb-6">
                        <label for="couponCode" class="block text-sm font-medium text-gray-700 mb-1">Apply
                            Coupon</label>
                        <div class="flex">
                            <select id="couponCode" name="couponCode"
                                class="flex-grow border border-gray-300 rounded-l-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Select a coupon</option>
                                <% if (coupons && coupons.length> 0) { %>
                                    <% coupons.forEach(function(coupon) { %>
                                        <option value="<%= coupon.code %>" data-type="<%= coupon.discountType %>"
                                            data-amount="<%= coupon.discountAmount %>"
                                            data-max="<%= coupon.maxDiscount || 0 %>">
                                            <%= coupon.code %> -
                                                <% if (coupon.discountType==='percentage' ) { %>
                                                    <%= coupon.discountAmount %>% off <% if (coupon.maxDiscount) { %>
                                                            (up to ₹<%= coupon.maxDiscount %>) <% } %>
                                                                    <% } else { %>
                                                                        ₹<%= coupon.discountAmount %> off
                                                                            <% } %>
                                        </option>
                                        <% }); %>
                                            <% } %>
                            </select>
                            <button type="button" id="applyCoupon"
                                class="bg-blue-500 hover:bg-blue-200 text-gray-800 font-medium py-2 px-4 rounded-r-md transition m-1">
                                Apply
                            </button>
                        </div>
                        <p id="coupon-description" class="text-sm text-gray-600 mt-1"></p>
                        <input type="hidden" name="couponCode" id="hiddenCouponCode">
                        <!-- Hidden field for form submission -->
                        <input type="hidden" name="discountType" id="hiddenDiscountType">
                    </div>
                    <button type="submit" id="place-order-btn"
                        class="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3 rounded-md transition">
                        Place Order
                    </button>
                </div>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize variables
            const subtotal = parseFloat('<%= cart.subtotal %>');
            const shipping = parseFloat('<%= cart.shipping %>');
            const tax = parseFloat('<%= cart.tax %>');
            let discount = 0;
            let total = subtotal + shipping + tax;
            let orderTotal = total;

            // Check COD eligibility based on initial total
            const codRadio = document.getElementById('cod');
            if (orderTotal > 1000) {
                codRadio.disabled = true;
                if (codRadio.checked) {
                    document.getElementById('credit-card').checked = true;
                    document.getElementById('credit-card-form').classList.remove('hidden');
                    document.getElementById('cod-form').classList.add('hidden');
                }
            }

            // Toggle payment method forms
            const creditCardRadio = document.getElementById('credit-card');
            const razorpayRadio = document.getElementById('razorpay');
            const walletRadio = document.getElementById('wallet');
            const creditCardForm = document.getElementById('credit-card-form');
            const razorpayForm = document.getElementById('razorpay-form');
            const codForm = document.getElementById('cod-form');
            const walletForm = document.getElementById('wallet-form');

            // Fetch wallet balance on page load
            fetchWalletBalance();

            // Payment method change listeners
            creditCardRadio.addEventListener('change', function () {
                if (this.checked) {
                    creditCardForm.classList.remove('hidden');
                    razorpayForm.classList.add('hidden');
                    walletForm.classList.add('hidden');
                    codForm.classList.add('hidden');
                    enablePlaceOrderButton();
                }
            });

            razorpayRadio.addEventListener('change', function () {
                if (this.checked) {
                    creditCardForm.classList.add('hidden');
                    razorpayForm.classList.remove('hidden');
                    walletForm.classList.add('hidden');
                    codForm.classList.add('hidden');
                    enablePlaceOrderButton();
                }
            });

            walletRadio.addEventListener('change', function () {
                if (this.checked) {
                    creditCardForm.classList.add('hidden');
                    razorpayForm.classList.add('hidden');
                    codForm.classList.add('hidden');
                    walletForm.classList.remove('hidden');
                    checkWalletBalance();
                }
            });

            codRadio.addEventListener('change', function () {
                if (this.checked) {
                    creditCardForm.classList.add('hidden');
                    razorpayForm.classList.add('hidden');
                    walletForm.classList.add('hidden');
                    codForm.classList.remove('hidden');
                    enablePlaceOrderButton();
                }
            });

            // Function to fetch wallet balance
            function fetchWalletBalance() {
                fetch('/user/wallet/balance')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById('available-balance').textContent = data.balance.toFixed(2);
                            if (walletRadio.checked) {
                                checkWalletBalance();
                            }
                        } else {
                            console.error('Error fetching wallet balance:', data.message);
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }

            // Function to check wallet balance
            function checkWalletBalance() {
                const walletBalance = parseFloat(document.getElementById('available-balance').textContent);
                const insufficientFunds = document.getElementById('insufficient-funds');
                const sufficientFunds = document.getElementById('sufficient-funds');
                const placeOrderBtn = document.getElementById('place-order-btn');

                if (walletBalance < orderTotal) {
                    insufficientFunds.classList.remove('hidden');
                    sufficientFunds.classList.add('hidden');
                    placeOrderBtn.disabled = true;
                    placeOrderBtn.classList.add('opacity-50', 'cursor-not-allowed');
                } else {
                    insufficientFunds.classList.add('hidden');
                    sufficientFunds.classList.remove('hidden');
                    placeOrderBtn.disabled = false;
                    placeOrderBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                }
            }

            // Function to enable place order button
            function enablePlaceOrderButton() {
                const placeOrderBtn = document.getElementById('place-order-btn');
                placeOrderBtn.disabled = false;
                placeOrderBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            }

            // Address selection
            const addressCards = document.querySelectorAll('.address-card');
            addressCards.forEach(card => {
                card.addEventListener('click', function () {
                    const radioInput = this.querySelector('input[type="radio"]');
                    radioInput.checked = true;
                    addressCards.forEach(c => c.classList.remove('selected'));
                    this.classList.add('selected');
                });
            });

            // Toggle new address form
            const addNewAddressBtn = document.getElementById('add-new-address');
            const newAddressForm = document.getElementById('new-address-form');
            const cancelAddressBtn = document.getElementById('cancel-address');

            if (addNewAddressBtn) {
                addNewAddressBtn.addEventListener('click', function () {
                    newAddressForm.classList.remove('hidden');
                    addNewAddressBtn.classList.add('hidden');
                });
            }

            if (cancelAddressBtn) {
                cancelAddressBtn.addEventListener('click', function () {
                    newAddressForm.classList.add('hidden');
                    addNewAddressBtn.classList.remove('hidden');
                    const formFields = newAddressForm.querySelectorAll('input, select');
                    formFields.forEach(field => {
                        if (field.type === 'checkbox') field.checked = false;
                        else field.value = '';
                    });
                });
            }

            // Save new address
            const saveAddressBtn = document.getElementById('save-address');
            if (saveAddressBtn) {
                saveAddressBtn.addEventListener('click', function () {
                    const requiredFields = ['address', 'city', 'district', 'state', 'pinCode', 'phone'];
                    let isValid = true;

                    for (const field of requiredFields) {
                        const input = document.getElementById(field);
                        if (!input.value.trim()) {
                            isValid = false;
                            input.classList.add('border-red-500');
                        } else {
                            input.classList.remove('border-red-500');
                        }
                    }

                    if (!isValid) {
                        Swal.fire({
                            title: 'Error',
                            text: 'Please fill out all required fields for the address',
                            icon: 'error',
                            confirmButtonColor: '#EF4444'
                        });
                        return;
                    }

                    const addressData = {
                        address: document.getElementById('address').value,
                        city: document.getElementById('city').value,
                        district: document.getElementById('district').value,
                        state: document.getElementById('state').value,
                        pinCode: document.getElementById('pinCode').value,
                        phone: document.getElementById('phone').value,
                        type: document.getElementById('addressType').value,
                        isDefault: document.getElementById('setDefault').checked
                    };

                    fetch('/user/checkout/addAddress', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(addressData),
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Address saved successfully',
                                    icon: 'success',
                                    confirmButtonColor: '#3B82F6'
                                }).then(() => location.reload());
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: data.message || 'Failed to save address',
                                    icon: 'error',
                                    confirmButtonColor: '#EF4444'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                title: 'Error',
                                text: 'An error occurred. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#EF4444'
                            });
                        });
                });
            }

            // Handle coupon application
            document.getElementById('applyCoupon').addEventListener('click', function () {
                const couponSelect = document.getElementById('couponCode');
                const couponCode = couponSelect.value.trim();
                const hiddenCouponCode = document.getElementById('hiddenCouponCode');
                const hiddenDiscountType = document.getElementById('hiddenDiscountType');

                if (!couponCode) {
                    Swal.fire({ title: 'Error', text: 'Please select a coupon', icon: 'error', confirmButtonColor: '#EF4444' });
                    return;
                }

                fetch('/user/checkout/apply-coupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponCode })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const coupon = data.coupon;
                            discount = data.discount;
                            orderTotal = data.total;

                            document.getElementById('coupon-code-display').textContent = coupon ? coupon.code : 'Offer';
                            document.getElementById('discount-amount').textContent = `-₹${discount.toFixed(2)}`;
                            document.getElementById('discount-row').classList.remove('hidden');
                            document.getElementById('total-amount').textContent = `₹${orderTotal.toFixed(2)}`;
                            hiddenCouponCode.value = coupon ? coupon.code : '';
                            hiddenDiscountType.value = data.discountType;

                            if (orderTotal > 1000) {
                                codRadio.disabled = true;
                                if (codRadio.checked) {
                                    creditCardRadio.checked = true;
                                    creditCardForm.classList.remove('hidden');
                                    razorpayForm.classList.add('hidden');
                                    walletForm.classList.add('hidden');
                                    codForm.classList.add('hidden');
                                }
                            } else {
                                codRadio.disabled = false;
                            }

                            if (walletRadio.checked) checkWalletBalance();

                            Swal.fire({ title: 'Success!', text: `${data.discountType === 'coupon' ? 'Coupon' : 'Offer'} applied successfully!`, icon: 'success', confirmButtonColor: '#3B82F6' });
                        } else {
                            Swal.fire({ title: 'Error', text: data.message || 'Invalid coupon code', icon: 'error', confirmButtonColor: '#EF4444' });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({ title: 'Error', text: 'An error occurred. Please try again.', icon: 'error', confirmButtonColor: '#EF4444' });
                    });
            });

            // Handle coupon removal
            document.getElementById('remove-coupon').addEventListener('click', function () {
                Swal.fire({
                    title: 'Remove Coupon',
                    text: 'Are you sure you want to remove the applied coupon?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#EF4444',
                    cancelButtonColor: '#6B7280',
                    confirmButtonText: 'Yes, remove it',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        discount = 0;
                        orderTotal = subtotal + shipping + tax;

                        document.getElementById('discount-row').classList.add('hidden');
                        document.getElementById('total-amount').textContent = `₹${orderTotal.toFixed(2)}`;
                        document.getElementById('coupon-code-display').textContent = '';
                        document.getElementById('couponCode').selectedIndex = 0;
                        document.getElementById('hiddenCouponCode').value = '';
                        document.getElementById('hiddenDiscountType').value = '';

                        if (orderTotal <= 1000) codRadio.disabled = false;
                        if (walletRadio.checked) checkWalletBalance();

                        Swal.fire({
                            title: 'Coupon Removed',
                            text: 'The coupon has been removed successfully.',
                            icon: 'success',
                            confirmButtonColor: '#3B82F6'
                        });
                    }
                });
            });

            // Form submission handler
            document.getElementById('checkout-form').addEventListener('submit', function (event) {
                event.preventDefault();

                // Validate address
                const addressSelected = document.querySelector('input[name="addressId"]:checked');
                if (!addressSelected && document.getElementById('new-address-form').classList.contains('hidden')) {
                    Swal.fire({
                        title: 'Error',
                        text: 'Please select a shipping address',
                        icon: 'error',
                        confirmButtonColor: '#EF4444'
                    });
                    return;
                }

                if (!addressSelected && !document.getElementById('new-address-form').classList.contains('hidden')) {
                    const requiredFields = ['address', 'city', 'district', 'state', 'pinCode', 'phone'];
                    let isValid = true;

                    for (const field of requiredFields) {
                        const input = document.getElementById(field);
                        if (!input.value.trim()) {
                            isValid = false;
                            input.classList.add('border-red-500');
                        } else {
                            input.classList.remove('border-red-500');
                        }
                    }

                    if (!isValid) {
                        Swal.fire({
                            title: 'Error',
                            text: 'Please fill out all required fields for the address',
                            icon: 'error',
                            confirmButtonColor: '#EF4444'
                        });
                        return;
                    }
                }

                // Get payment method
                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

                // Handle wallet payment
                if (paymentMethod === 'wallet') {
                    const walletBalance = parseFloat(document.getElementById('available-balance').textContent);

                    if (walletBalance < orderTotal) {
                        Swal.fire({
                            title: 'Error',
                            text: 'Insufficient wallet balance. Please add money to your wallet or choose a different payment method.',
                            icon: 'error',
                            confirmButtonColor: '#EF4444'
                        });
                        return;
                    }

                    Swal.fire({
                        title: 'Confirm Wallet Payment',
                        text: `Are you sure you want to pay ₹${orderTotal.toFixed(2)} from your wallet?`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#10B981',
                        cancelButtonColor: '#6B7280',
                        confirmButtonText: 'Yes, pay now',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: 'Processing Payment',
                                text: 'Please wait while we process your payment...',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                showConfirmButton: false,
                                willOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            const form = document.createElement('form');
                            form.method = 'POST';
                            form.action = '/user/checkout/process-wallet-payment';

                            const addressId = document.querySelector('input[name="addressId"]:checked')?.value;
                            const couponCode = document.getElementById('hiddenCouponCode').value;
                            const discountType = document.getElementById('hiddenDiscountType').value;

                            const fields = {
                                addressId: addressId,
                                couponCode: couponCode,
                                amount: orderTotal,
                                discountType: discountType
                            };

                            for (const [key, value] of Object.entries(fields)) {
                                const input = document.createElement('input');
                                input.type = 'hidden';
                                input.name = key;
                                input.value = value || '';
                                form.appendChild(input);
                            }

                            document.body.appendChild(form);
                            form.submit();
                        }
                    });
                    return;
                }

                // Handle Razorpay payment
                if (paymentMethod === 'razorpay') {
                    const submitButton = document.getElementById('place-order-btn');
                    submitButton.disabled = true;
                    submitButton.innerHTML = 'Processing...';

                    const formData = new FormData(this);
                    const addressId = formData.get('addressId');
                    const couponCode = document.getElementById('hiddenCouponCode').value;
                    const discountType = document.getElementById('hiddenDiscountType').value;

                    fetch('/user/checkout/initiate-razorpay', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ addressId, couponCode, discountType }),
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const options = {
                                    key: data.key,
                                    amount: data.amount,
                                    currency: "INR",
                                    name: "WaveTunes",
                                    description: "Purchase from WaveTunes",
                                    order_id: data.order.id,
                                    handler: function (response) {
                                        verifyPayment(response, data.order);
                                    },
                                    prefill: {
                                        name: data.userInfo.name,
                                        email: data.userInfo.email,
                                        contact: data.userInfo.contact
                                    },
                                    theme: { color: "#3B82F6" },
                                    modal: {
                                        ondismiss: function () {
                                            submitButton.disabled = false;
                                            submitButton.innerHTML = 'Place Order';
                                        }
                                    }
                                };

                                const razorpayPayment = new Razorpay(options);
                                razorpayPayment.open();
                            } else {
                                submitButton.disabled = false;
                                submitButton.innerHTML = 'Place Order';
                                Swal.fire({
                                    title: 'Error',
                                    text: data.message || 'Error initiating payment',
                                    icon: 'error',
                                    confirmButtonColor: '#EF4444'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            submitButton.disabled = false;
                            submitButton.innerHTML = 'Place Order';
                            Swal.fire({
                                title: 'Error',
                                text: 'An error occurred. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#EF4444'
                            });
                        });
                    return;
                }

                // Handle credit card payment
                if (paymentMethod === 'creditCard') {
                    const cardFields = ['cardNumber', 'cardName', 'expiry', 'cvv'];
                    let isValid = true;

                    for (const field of cardFields) {
                        const input = document.getElementById(field);
                        if (!input.value.trim()) {
                            isValid = false;
                            input.classList.add('border-red-500');
                        } else {
                            input.classList.remove('border-red-500');
                        }
                    }

                    if (!isValid) {
                        Swal.fire({
                            title: 'Error',
                            text: 'Please fill out all required payment fields',
                            icon: 'error',
                            confirmButtonColor: '#EF4444'
                        });
                        return;
                    }
                }

                // Handle COD or credit card submission
                const submitButton = document.getElementById('place-order-btn');
                submitButton.disabled = true;
                submitButton.innerHTML = 'Processing...';

                Swal.fire({
                    title: 'Confirm Order',
                    text: 'Are you sure you want to place this order?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#10B981',
                    cancelButtonColor: '#EF4444',
                    confirmButtonText: 'Yes, place order!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: 'Processing Order',
                            text: 'Please wait while we process your order...',
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            showConfirmButton: false,
                            willOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        this.submit();
                    } else {
                        submitButton.disabled = false;
                        submitButton.innerHTML = 'Place Order';
                    }
                });
            });

            // Function to verify Razorpay payment
            function verifyPayment(paymentData, orderData) {
                Swal.fire({
                    title: 'Verifying Payment',
                    text: 'Please wait while we verify your payment...',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/user/checkout/verify-razorpay';

                const fields = {
                    razorpay_payment_id: paymentData.razorpay_payment_id,
                    razorpay_order_id: paymentData.razorpay_order_id,
                    razorpay_signature: paymentData.razorpay_signature,
                    discountType: document.getElementById('hiddenDiscountType').value
                };

                for (const [key, value] of Object.entries(fields)) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = key;
                    input.value = value;
                    form.appendChild(input);
                }

                document.body.appendChild(form);
                form.submit();
            }
        });
    </script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <%- include('./partials/user/footer') %>
</body>