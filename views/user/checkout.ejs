<head>
    <title>Checkout | WaveTunes</title>
    <%- include('./partials/user/header') %>
        <style>
            .checkout-section {
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }

            .checkout-section:hover {
                transform: scale(1.01);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

            .address-card {
                border: 2px solid #e5e7eb;
                border-radius: 0.5rem;
                padding: 1rem;
                margin-bottom: 1rem;
                cursor: pointer;
                transition: border-color 0.2s ease;
            }

            .address-card.selected {
                border-color: #3B82F6;
                background-color: #EFF6FF;
            }

            .address-card:hover {
                border-color: #93C5FD;
            }

            .address-badge {
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
                border-radius: 9999px;
                font-weight: 500;
            }

            .badge-default {
                background-color: #10B981;
                color: white;
            }

            .badge-home {
                background-color: #3B82F6;
                color: white;
            }

            .badge-work {
                background-color: #6366F1;
                color: white;
            }

            .badge-other {
                background-color: #8B5CF6;
                color: white;
            }

            .strikethrough {
                text-decoration: line-through;
                color: #6b7280;
                font-size: 0.875rem;
            }

            /* Inline Validation Styles */
            .error-message {
                color: #dc2626;
                font-size: 0.75rem;
                margin-top: 0.25rem;
                display: none;
            }

            .input-error {
                border-color: #dc2626 !important;
            }

            /* Disabled COD Styling */
            .disabled-radio {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .disabled-message {
                color: #dc2626;
                font-size: 0.75rem;
                margin-top: 0.25rem;
            }
        </style>
</head>

<body>
    <div class="container mx-auto px-4 py-8">
        <nav class="mb-8" aria-label="Breadcrumb">
            <ol class="flex text-sm">
                <li><a href="/" class="text-white hover:text-blue-700">Home</a></li>
                <li class="mx-2 text-white">/</li>
                <li><a href="/user/cart" class="text-white hover:text-blue-700">My Cart</a></li>
                <li class="mx-2 text-white">/</li>
                <li class="text-white font-medium">Checkout</li>
            </ol>
        </nav>

        <h1 class="text-3xl font-bold mb-8 text-white">Checkout</h1>

        <form id="checkout-form" method="POST" action="/user/checkout/placeOrder">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Left Column - Shipping & Payment -->
                <div class="lg:col-span-2 space-y-6">
                    <!-- Shipping Information -->
                    <div class="bg-white rounded-lg shadow-md p-6 checkout-section">
                        <h2 class="text-2xl font-semibold mb-6 text-gray-800">Shipping Information</h2>

                        <!-- Saved Addresses Section -->
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-4 text-gray-700">Saved Addresses</h3>

                            <!-- Check if user has saved addresses -->
                            <% if (addresses && addresses.length> 0) { %>
                                <div id="saved-addresses">
                                    <% addresses.forEach(function(address) { %>
                                        <div class="address-card <%= address.isDefault ? 'selected' : '' %>"
                                            data-address-id="<%= address._id %>">
                                            <div class="flex justify-between items-start mb-2">
                                                <div class="flex space-x-2">
                                                    <input type="radio" name="addressId" value="<%= address._id %>"
                                                        <%=address.isDefault ? 'checked' : '' %>
                                                    class="mt-1 w-4 h-4 text-blue-600 focus:ring-blue-500">
                                                    <div>
                                                        <div class="flex items-center">
                                                            <span class="font-medium">
                                                                <%= address.addressType %>
                                                            </span>
                                                            <% if (address.isDefault) { %>
                                                                <span
                                                                    class="ml-2 address-badge badge-default">Default</span>
                                                                <% } %>
                                                                    <span
                                                                        class="ml-2 address-badge badge-<%= address.addressType.toLowerCase() %>">
                                                                        <%= address.addressType %>
                                                                    </span>
                                                        </div>
                                                        <p class="text-sm text-gray-600">
                                                            <%= address.address %>
                                                        </p>
                                                        <p class="text-sm text-gray-600">
                                                            <%= address.city %>, <%= address.district %>, <%=
                                                                        address.state %> - <%= address.pinCode %>
                                                        </p>
                                                        <p class="text-sm text-gray-600">Phone: <%= address.phone %>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                </div>
                                <button type="button" id="add-new-address"
                                    class="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center mt-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none"
                                        viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M12 4v16m8-8H4" />
                                    </svg>
                                    Add New Address
                                </button>
                                <% } else { %>
                                    <div class="text-gray-600 mb-4">You don't have any saved addresses yet.</div>
                                    <% } %>
                        </div>

                        <!-- New Address Form (Initially hidden if addresses exist) -->
                        <div id="new-address-form" class="<%= addresses && addresses.length > 0 ? 'hidden' : '' %>">
                            <h3 class="text-lg font-medium mb-4 text-gray-700">Add New Address</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="md:col-span-2">
                                    <label for="address" class="block text-sm font-medium text-gray-700 mb-1">Street
                                        Address</label>
                                    <input type="text" id="address" name="address"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <p class="error-message" id="address-error"></p>
                                </div>
                                <div>
                                    <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
                                    <input type="text" id="city" name="city"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <p class="error-message" id="city-error"></p>
                                </div>
                                <div>
                                    <label for="district"
                                        class="block text-sm font-medium text-gray-700 mb-1">District</label>
                                    <input type="text" id="district" name="district"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <p class="error-message" id="district-error"></p>
                                </div>
                                <div>
                                    <label for="state"
                                        class="block text-sm font-medium text-gray-700 mb-1">State/Province</label>
                                    <input type="text" id="state" name="state"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <p class="error-message" id="state-error"></p>
                                </div>
                                <div>
                                    <label for="pinCode" class="block text-sm font-medium text-gray-700 mb-1">PIN/Postal
                                        Code</label>
                                    <input type="text" id="pinCode" name="pinCode"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <p class="error-message" id="pinCode-error"></p>
                                </div>
                                <div>
                                    <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone
                                        Number</label>
                                    <input type="text" id="phone" name="phone"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <p class="error-message" id="phone-error"></p>
                                </div>
                                <div>
                                    <label for="addressType"
                                        class="block text-sm font-medium text-gray-700 mb-1">Address Type</label>
                                    <select id="addressType" name="type"
                                        class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="">Select Address Type</option>
                                        <option value="Home">Home</option>
                                        <option value="Work">Work</option>
                                        <option value="Other">Other</option>
                                    </select>
                                    <p class="error-message" id="addressType-error"></p>
                                </div>
                                <div class="flex items-center">
                                    <input type="checkbox" id="setDefault" name="isDefault"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="setDefault" class="ml-2 text-sm text-gray-700">Set as default
                                        address</label>
                                </div>
                            </div>

                            <div class="flex mt-4 space-x-4">
                                <button type="button" id="save-address"
                                    class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition"
                                    disabled>
                                    Save Address
                                </button>
                                <% if (addresses && addresses.length> 0) { %>
                                    <button type="button" id="cancel-address"
                                        class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-md transition">
                                        Cancel
                                    </button>
                                    <% } %>
                            </div>
                        </div>
                    </div>

                    <!-- Payment Information -->
                    <div class="bg-white rounded-lg shadow-md p-6 checkout-section">
                        <h2 class="text-2xl font-semibold mb-6 text-gray-800">Payment Method</h2>
                        <div class="space-y-4">
                            <div class="flex space-x-4 mb-6">
                                <div class="flex items-center">
                                    <input type="radio" id="razorpay" name="paymentMethod" value="razorpay"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="razorpay" class="ml-2 text-gray-700">Razorpay</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="radio" id="cod" name="paymentMethod" value="cod"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="cod" class="ml-2 text-gray-700">Cash on Delivery</label>
                                </div>
                                <div class="flex items-center">
                                    <input type="radio" id="wallet" name="paymentMethod" value="wallet"
                                        class="w-4 h-4 text-blue-600 focus:ring-blue-500">
                                    <label for="wallet" class="ml-2 text-gray-700">Wallet</label>
                                </div>
                            </div>
                            <!-- <p id="cod-disabled-message" class="disabled-message hidden">COD is not available for orders
                                above ₹1000.</p> -->

                            <div id="razorpay-form" class="hidden">
                                <p class="text-gray-700">You will be redirected to Razorpay to complete your payment
                                    securely.</p>
                            </div>
                            <div id="wallet-form" class="hidden">
                                <div class="border border-gray-200 rounded-lg p-4 bg-gray-50">
                                    <div class="flex justify-between items-center mb-4">
                                        <div>
                                            <h3 class="text-lg font-medium text-gray-800">Wallet Balance</h3>
                                            <p class="text-gray-600" id="wallet-balance">₹<span
                                                    id="available-balance">0.00</span></p>
                                        </div>
                                        <a href="/user/wallet"
                                            class="text-blue-600 hover:text-blue-800 font-medium text-sm">
                                            Add Money
                                        </a>
                                    </div>

                                    <div id="insufficient-funds" class="hidden text-red-600 text-sm mb-4">
                                        <div class="flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1"
                                                viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd"
                                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                            Insufficient funds in your wallet. Please add money or choose a different
                                            payment method.
                                        </div>
                                    </div>

                                    <div id="sufficient-funds" class="hidden text-green-600 text-sm mb-4">
                                        <div class="flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1"
                                                viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd"
                                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                            You have sufficient balance to complete this purchase.
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="cod-form" class="hidden">
                                <p class="text-gray-700">Pay at the time of delivery.</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column - Order Summary -->
                <div class="bg-white rounded-lg shadow-md p-6 sticky top-6 checkout-section">
                    <h2 class="text-2xl font-semibold mb-6 text-gray-800">Order Summary</h2>
                    <div class="space-y-4 mb-4">
                        <% if (cart && cart.items && cart.items.length> 0) { %>
                            <% cart.items.forEach(function(item) { %>
                                <div class="flex justify-between border-b border-gray-200 pb-2">
                                    <div class="flex items-center">
                                        <span class="text-gray-700 font-medium">
                                            <%= item.quantity %>x
                                        </span>
                                        <span class="ml-2 text-gray-700 truncate max-w-[180px]">
                                            <%= item.product.name %>
                                        </span>
                                    </div>
                                    <div class="text-right">
                                        <% if (item.product.offerPercentage> 0) { %>
                                            <span class="font-medium">
                                                ₹<%= ((item.product.price * (1 - item.product.offerPercentage / 100)) *
                                                    item.quantity).toFixed(2) %>
                                            </span>
                                            <span class="strikethrough block">
                                                ₹<%= (item.product.price * item.quantity).toFixed(2) %>
                                            </span>
                                            <span class="offer-percentage block text-green-600">
                                                <%= item.product.offerPercentage %>% off
                                            </span>
                                            <% } else { %>
                                                <span class="font-medium">
                                                    ₹<%= (item.product.price * item.quantity).toFixed(2) %>
                                                </span>
                                                <% } %>
                                    </div>
                                </div>
                                <% }); %>
                                    <% } %>
                                        <div class="space-y-2" id="order-summary">
                                            <div class="flex justify-between">
                                                <span class="text-gray-700">Subtotal</span>
                                                <span class="font-medium">₹<%= cart.subtotal.toFixed(2) %></span>
                                            </div>
                                            <div id="discount-row" class="flex justify-between hidden">
                                                <span class="text-green-600">Discount (<span
                                                        id="coupon-code-display"></span>)</span>
                                                <div class="flex items-center space-x-2">
                                                    <span class="font-medium text-green-600"
                                                        id="discount-amount"></span>
                                                    <button type="button" id="remove-coupon"
                                                        class="text-red-600 hover:text-red-800 text-sm font-medium">
                                                        Remove
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="flex justify-between">
                                                <span class="text-gray-700">Shipping</span>
                                                <span class="font-medium">₹<%= cart.shipping.toFixed(2) %></span>
                                            </div>
                                            <div class="flex justify-between">
                                                <span class="text-gray-700">Tax</span>
                                                <span class="font-medium">₹<%= cart.tax.toFixed(2) %></span>
                                            </div>
                                            <hr class="border-gray-200">
                                            <div class="flex justify-between text-xl font-bold">
                                                <span>Total</span>
                                                <span id="total-amount">₹<%= cart.total.toFixed(2) %></span>
                                            </div>
                                        </div>
                    </div>

                    <div class="mb-6">
                        <label for="couponCode" class="block text-sm font-medium text-gray-700 mb-1">Apply
                            Coupon</label>
                        <div class="flex">
                            <select id="couponCode" name="couponCode"
                                class="flex-grow border border-gray-300 rounded-l-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Select a coupon</option>
                                <% if (coupons && coupons.length> 0) { %>
                                    <% coupons.forEach(function(coupon) { %>
                                        <option value="<%= coupon.code %>" data-type="<%= coupon.discountType %>"
                                            data-amount="<%= coupon.discountAmount %>"
                                            data-max="<%= coupon.maxDiscount || 0 %>">
                                            <%= coupon.code %> -
                                                <% if (coupon.discountType==='percentage' ) { %>
                                                    <%= coupon.discountAmount %>% off
                                                        <% if (coupon.maxDiscount) { %>
                                                            (up to ₹<%= coupon.maxDiscount %>)
                                                                <% } %>
                                                                    <% } else { %>
                                                                        ₹<%= coupon.discountAmount %> off
                                                                            <% } %>
                                        </option>
                                        <% }); %>
                                            <% } %>
                            </select>
                            <button type="button" id="applyCoupon"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-r-md transition">
                                Apply
                            </button>
                        </div>
                        <p id="coupon-message" class="text-sm text-red-600 mt-2 hidden"></p>
                    </div>

                    <button type="submit" id="place-order-btn"
                        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 rounded-md transition"
                        disabled>
                        Place Order
                    </button>
                </div>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const checkoutForm = document.getElementById('checkout-form');
            const placeOrderBtn = document.getElementById('place-order-btn');
            const paymentMethodInputs = document.querySelectorAll('input[name="paymentMethod"]');
            const addressCards = document.querySelectorAll('.address-card');
            const addNewAddressBtn = document.getElementById('add-new-address');
            const newAddressForm = document.getElementById('new-address-form');
            const cancelAddressBtn = document.getElementById('cancel-address');
            const saveAddressBtn = document.getElementById('save-address');
            const applyCouponBtn = document.getElementById('applyCoupon');
            const couponCodeSelect = document.getElementById('couponCode');
            const discountRow = document.getElementById('discount-row');
            const discountAmount = document.getElementById('discount-amount');
            const couponCodeDisplay = document.getElementById('coupon-code-display');
            const totalAmount = document.getElementById('total-amount');
            const removeCouponBtn = document.getElementById('remove-coupon');
            const couponMessage = document.getElementById('coupon-message');
            const walletForm = document.getElementById('wallet-form');
            const availableBalance = document.getElementById('available-balance');
            const insufficientFunds = document.getElementById('insufficient-funds');
            const sufficientFunds = document.getElementById('sufficient-funds');
            const codRadio = document.getElementById('cod');
            // const codDisabledMessage = document.getElementById('cod-disabled-message');


            let selectedCoupon = null;
            let discountType = 'offer';
            let selectedAddressId = null;

            // Inline Validation for Address Form
            const fields = [
                {
                    id: 'address',
                    validate: value => {
                        if (!value.trim()) return 'Street Address is required';
                        if (value.length < 5) return 'Street Address must be at least 5 characters';
                        return '';
                    }
                },
                {
                    id: 'city',
                    validate: value => {
                        if (!value.trim()) return 'City is required';
                        if (!/^[a-zA-Z\s]+$/.test(value)) return 'City must contain only letters and spaces';
                        if (value.length < 2) return 'City must be at least 2 characters';
                        return '';
                    }
                },
                {
                    id: 'district',
                    validate: value => {
                        if (!value.trim()) return 'District is required';
                        if (!/^[a-zA-Z\s]+$/.test(value)) return 'District must contain only letters and spaces';
                        if (value.length < 2) return 'District must be at least 2 characters';
                        return '';
                    }
                },
                {
                    id: 'state',
                    validate: value => {
                        if (!value.trim()) return 'State is required';
                        if (!/^[a-zA-Z\s]+$/.test(value)) return 'State must contain only letters and spaces';
                        if (value.length < 2) return 'State must be at least 2 characters';
                        return '';
                    }
                },
                {
                    id: 'pinCode',
                    validate: value => {
                        if (!value.trim()) return 'PIN Code is required';
                        if (!/^\d{6}$/.test(value)) return 'PIN Code must be exactly 6 digits';
                        return '';
                    }
                },
                {
                    id: 'phone',
                    validate: value => {
                        if (!value.trim()) return 'Phone Number is required';
                        if (!/^\d{10}$/.test(value)) return 'Phone Number must be exactly 10 digits';
                        return '';
                    }
                },
                {
                    id: 'addressType',
                    validate: value => {
                        if (!value) return 'Address Type is required';
                        if (!['Home', 'Work', 'Other'].includes(value)) return 'Invalid Address Type';
                        return '';
                    }
                }
            ];

            // Validate all fields and update button state
            function validateForm() {
                let allValid = true;
                const errors = [];

                fields.forEach(field => {
                    const input = document.getElementById(field.id);
                    const errorElement = document.getElementById(`${field.id}-error`);
                    const value = input.value.trim();
                    const error = field.validate(value);

                    if (error) {
                        errorElement.textContent = error;
                        errorElement.style.display = 'block';
                        input.classList.add('input-error');
                        allValid = false;
                        errors.push(error);
                    } else {
                        errorElement.textContent = '';
                        errorElement.style.display = 'none';
                        input.classList.remove('input-error');
                    }
                });

                saveAddressBtn.disabled = !allValid;
                return { isValid: allValid, errors };
            }

            // Update Place Order button state
            function updatePlaceOrderButton() {
                const isNewAddressFormVisible = !newAddressForm.classList.contains('hidden');
                placeOrderBtn.disabled = isNewAddressFormVisible || !selectedAddressId;
            }

            // Update COD button state based on order total
            function updateCodButtonState() {
                const total = parseFloat(totalAmount.textContent.replace('₹', '')) || 0;
                if (total > 1000) {
                    codRadio.disabled = true;
                    codRadio.classList.add('disabled-radio');
                    // codDisabledMessage.classList.remove('hidden');
                    // If COD is currently selected, switch to another payment method
                    if (codRadio.checked) {
                        document.getElementById('cod-form').classList.add('hidden');
                    }
                } else {
                    codRadio.disabled = false;
                    codRadio.classList.remove('disabled-radio');
                    // codDisabledMessage.classList.add('hidden');
                }
            }

            // Add event listeners for real-time validation
            fields.forEach(field => {
                const input = document.getElementById(field.id);
                input.addEventListener('input', validateForm);
                input.addEventListener('blur', validateForm);
            });

            // Toggle address selection
            addressCards.forEach(card => {
                card.addEventListener('click', function () {
                    addressCards.forEach(c => c.classList.remove('selected'));
                    this.classList.add('selected');
                    const radio = this.querySelector('input[type="radio"]');
                    radio.checked = true;
                    selectedAddressId = radio.value;
                    updatePlaceOrderButton();
                });
            });

            // Show/hide new address form
            if (addNewAddressBtn) {
                addNewAddressBtn.addEventListener('click', function () {
                    newAddressForm.classList.remove('hidden');
                    document.getElementById('saved-addresses').classList.add('hidden');
                    this.classList.add('hidden');
                    selectedAddressId = null;
                    updatePlaceOrderButton();
                });
            }

            if (cancelAddressBtn) {
                cancelAddressBtn.addEventListener('click', function () {
                    newAddressForm.classList.add('hidden');
                    document.getElementById('saved-addresses').classList.remove('hidden');
                    addNewAddressBtn.classList.remove('hidden');
                    // Clear form and errors
                    fields.forEach(field => {
                        const input = document.getElementById(field.id);
                        input.value = field.id === 'addressType' ? '' : input.value;
                        const errorElement = document.getElementById(`${field.id}-error`);
                        errorElement.textContent = '';
                        errorElement.style.display = 'none';
                        input.classList.remove('input-error');
                    });
                    saveAddressBtn.disabled = true;
                    // Reset to default address
                    const defaultAddress = document.querySelector('input[name="addressId"][checked]');
                    selectedAddressId = defaultAddress ? defaultAddress.value : null;
                    updatePlaceOrderButton();
                });
            }

            // Save new address
            if (saveAddressBtn) {
                saveAddressBtn.addEventListener('click', async function () {
                    const { isValid, errors } = validateForm();

                    if (!isValid) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Input',
                            html: errors.map(error => `<p>${error}</p>`).join('')
                        });
                        return;
                    }

                    const addressData = {
                        address: document.getElementById('address').value,
                        city: document.getElementById('city').value,
                        district: document.getElementById('district').value,
                        state: document.getElementById('state').value,
                        pinCode: document.getElementById('pinCode').value,
                        phone: document.getElementById('phone').value,
                        addressType: document.getElementById('addressType').value,
                        isDefault: document.getElementById('setDefault').checked
                    };

                    try {
                        const response = await fetch('/user/checkout/addAddress', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(addressData)
                        });
                        const data = await response.json();

                        if (data.success) {
                            // Show success SweetAlert
                            await Swal.fire({
                                icon: 'success',
                                title: 'Address Saved',
                                text: 'Your new address has been saved successfully.'
                            });
                            window.location.reload();
                            // Add the new address to the saved addresses list
                            const newAddress = data.address;
                            const savedAddresses = document.getElementById('saved-addresses');
                            const addressCard = document.createElement('div');
                            addressCard.classList.add('address-card');
                            addressCard.setAttribute('data-address-id', newAddress._id);
                            addressCard.innerHTML = `
                                <div class="flex justify-between items-start mb-2">
                                    <div class="flex space-x-2">
                                        <input type="radio" name="addressId" value="${newAddress._id}" class="mt-1 w-4 h-4 text-blue-600 focus:ring-blue-500">
                                        <div>
                                            <div class="flex items-center">
                                                <span class="font-medium">${newAddress.addressType}</span>
                                                ${newAddress.isDefault ? '<span class="ml-2 address-badge badge-default">Default</span>' : ''}
                                                <span class="ml-2 address-badge badge-${newAddress.addressType.toLowerCase()}">${newAddress.addressType}</span>
                                            </div>
                                            <p class="text-sm text-gray-600">${newAddress.address}</p>
                                            <p class="text-sm text-gray-600">${newAddress.city}, ${newAddress.district}, ${newAddress.state} - ${newAddress.pinCode}</p>
                                            <p class="text-sm text-gray-600">Phone: ${newAddress.phone}</p>
                                        </div>
                                    </div>
                                </div>
                            `;
                            if (savedAddresses) {
                                savedAddresses.appendChild(addressCard);
                                // Re-attach click event to new address card
                                addressCard.addEventListener('click', function () {
                                    addressCards.forEach(c => c.classList.remove('selected'));
                                    this.classList.add('selected');
                                    const radio = this.querySelector('input[type="radio"]');
                                    radio.checked = true;
                                    selectedAddressId = radio.value;
                                    updatePlaceOrderButton();
                                });
                            }
                            // Hide new address form and show saved addresses
                            newAddressForm.classList.add('hidden');
                            if (savedAddresses) {
                                savedAddresses.classList.remove('hidden');
                                addNewAddressBtn.classList.remove('hidden');
                            }
                            // Clear form
                            fields.forEach(field => {
                                const input = document.getElementById(field.id);
                                input.value = field.id === 'addressType' ? '' : input.value;
                                const errorElement = document.getElementById(`${field.id}-error`);
                                errorElement.textContent = '';
                                errorElement.style.display = 'none';
                                input.classList.remove('input-error');
                            });
                            saveAddressBtn.disabled = true;
                            // Select the new address
                            selectedAddressId = newAddress._id;
                            updatePlaceOrderButton();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Error saving address'
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error saving address'
                        });
                        console.error(error);
                    }
                });
            }

            // Toggle payment method forms
            paymentMethodInputs.forEach(input => {
                input.addEventListener('change', function () {
                    document.getElementById('razorpay-form').classList.add('hidden');
                    document.getElementById('cod-form').classList.add('hidden');
                    document.getElementById('wallet-form').classList.add('hidden');

                    if (this.value === 'razorpay') {
                        document.getElementById('razorpay-form').classList.remove('hidden');
                    } else if (this.value === 'cod') {
                        document.getElementById('cod-form').classList.remove('hidden');
                    } else if (this.value === 'wallet') {
                        document.getElementById('wallet-form').classList.remove('hidden');
                        fetchWalletBalance();
                    }
                });
            });

            // Prevent clicking disabled COD radio
            codRadio.addEventListener('click', function (e) {
                if (codRadio.disabled) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'COD Unavailable',
                        text: 'Cash on Delivery is not available for orders above ₹1000. Please choose another payment method.'
                    });
                }
            });

            // Fetch wallet balance
            async function fetchWalletBalance() {
                try {
                    const response = await fetch('/user/wallet/balance');
                    const data = await response.json();
                    const balance = data.balance || 0;
                    availableBalance.textContent = balance.toFixed(2);
                    const total = parseFloat(totalAmount.textContent.replace('₹', '')) || 0;
                    if (balance >= total) {
                        sufficientFunds.classList.remove('hidden');
                        insufficientFunds.classList.add('hidden');
                    } else {
                        insufficientFunds.classList.remove('hidden');
                        sufficientFunds.classList.add('hidden');
                    }
                } catch (error) {
                    console.error('Error fetching wallet balance:', error);
                }
            }

            // Apply coupon
            applyCouponBtn.addEventListener('click', async function () {
                const couponCode = couponCodeSelect.value;
                if (!couponCode) {
                    couponMessage.textContent = 'Please select a coupon';
                    couponMessage.classList.remove('hidden');
                    return;
                }

                try {
                    const response = await fetch('/user/checkout/apply-coupon', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ couponCode })
                    });
                    const data = await response.json();

                    if (data.success) {
                        selectedCoupon = data.coupon;
                        discountType = data.discountType;
                        discountRow.classList.remove('hidden');
                        discountAmount.textContent = `₹${data.discount.toFixed(2)}`;
                        couponCodeDisplay.textContent = selectedCoupon ? selectedCoupon.code : '';
                        totalAmount.textContent = `₹${data.total.toFixed(2)}`;
                        couponMessage.classList.add('hidden');
                        updateCodButtonState(); // Re-evaluate COD button state
                    } else {
                        couponMessage.textContent = data.message;
                        couponMessage.classList.remove('hidden');
                    }
                } catch (error) {
                    couponMessage.textContent = 'Error applying coupon';
                    couponMessage.classList.remove('hidden');
                    console.error(error);
                }
            });

            // Remove coupon
            removeCouponBtn.addEventListener('click', async function () {
                try {
                    const response = await fetch('/user/checkout/apply-coupon', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ couponCode: '' })
                    });
                    const data = await response.json();

                    if (data.success) {
                        selectedCoupon = null;
                        discountType = 'offer';
                        discountRow.classList.add('hidden');
                        totalAmount.textContent = `₹${data.total.toFixed(2)}`;
                        couponCodeSelect.value = '';
                        couponMessage.classList.add('hidden');
                        updateCodButtonState(); // Re-evaluate COD button state
                    }
                } catch (error) {
                    console.error('Error removing coupon:', error);
                }
            });

            // Handle form submission
            checkoutForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                placeOrderBtn.disabled = true;
                placeOrderBtn.textContent = 'Processing...';

                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
                const addressId = selectedAddressId;
                const couponCode = selectedCoupon ? selectedCoupon.code : '';

                if (!newAddressForm.classList.contains('hidden')) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Address Not Saved',
                        text: 'Please save the new address before placing the order.'
                    });
                    placeOrderBtn.disabled = false;
                    placeOrderBtn.textContent = 'Place Order';
                    return;
                }

                if (!addressId) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Address Required',
                        text: 'Please select an address.'
                    });
                    placeOrderBtn.disabled = false;
                    placeOrderBtn.textContent = 'Place Order';
                    return;
                }

                try {
                    if (paymentMethod === 'razorpay') {
                        const response = await fetch('/user/checkout/initiate-razorpay', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ addressId, couponCode, discountType })
                        });
                        const data = await response.json();

                        if (!data.success) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message
                            });
                            placeOrderBtn.disabled = false;
                            placeOrderBtn.textContent = 'Place Order';
                            return;
                        }

                        const { order, key, amount, userInfo, pendingOrderId } = data;

                        const options = {
                            key: key,
                            amount: order.amount,
                            currency: 'INR',
                            name: 'WaveTunes',
                            description: 'Order Payment',
                            image: '/images/logo.png',
                            order_id: order.id,
                            handler: function (response) {
                                // Create a form to submit the verification data to the server
                                const form = document.createElement('form');
                                form.method = 'POST';
                                form.action = '/user/checkout/verify-razorpay';

                                const fields = {
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    discountType: discountType
                                };

                                for (const [key, value] of Object.entries(fields)) {
                                    const input = document.createElement('input');
                                    input.type = 'hidden';
                                    input.name = key;
                                    input.value = value;
                                    form.appendChild(input);
                                }

                                document.body.appendChild(form);
                                form.submit();
                            },
                            prefill: {
                                name: userInfo.name,
                                email: userInfo.email,
                                contact: userInfo.contact
                            },
                            notes: {
                                address: 'WaveTunes Customer'
                            },
                            theme: {
                                color: '#3B82F6'
                            },
                            modal: {
                                ondismiss: function () {
                                    Swal.fire({
                                        icon: 'info',
                                        title: 'Payment Cancelled',
                                        text: 'Your order has been saved as pending. You can retry the payment from My Orders.',
                                        confirmButtonText: 'Go to My Orders'
                                    }).then(() => {
                                        window.location.href = '/user/myOrders';
                                    });
                                }
                            }
                        };

                        const rzp = new Razorpay(options);
                        rzp.open();
                    } else if (paymentMethod === 'wallet') {
                        const total = parseFloat(totalAmount.textContent.replace('₹', ''));
                        // Create a form to submit the wallet payment data to the server
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/user/checkout/process-wallet-payment';

                        const fields = {
                            addressId: addressId,
                            couponCode: couponCode,
                            amount: total,
                            discountType: discountType
                        };

                        for (const [key, value] of Object.entries(fields)) {
                            const input = document.createElement('input');
                            input.type = 'hidden';
                            input.name = key;
                            input.value = value;
                            form.appendChild(input);
                        }

                        document.body.appendChild(form);
                        form.submit();
                    } else {
                        // Handle COD and Credit Card
                        if (paymentMethod === 'creditCard') {
                            Swal.fire({
                                icon: 'info',
                                title: 'Not Available',
                                text: 'Credit Card payment is not supported yet.'
                            });
                            placeOrderBtn.disabled = false;
                            placeOrderBtn.textContent = 'Place Order';
                            return;
                        }

                        const response = await fetch('/user/placeOrder', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ addressId, paymentMethod, couponCode, discountType })
                        });
                        const data = await response.json();

                        if (data.success) {
                            // No redirect; server renders user/orderConfirm
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message
                            });
                        }
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message === 'Network Error' ? 'Network error occurred. Please try again.' :
                            error.response?.status === 429 ? 'Too many requests. Please try again later.' :
                                'Error processing order'
                    });
                    console.error(error);
                } finally {
                    placeOrderBtn.disabled = false;
                    placeOrderBtn.textContent = 'Place Order';
                }
            });

            // Initialize Place Order button state and COD button state
            const defaultAddress = document.querySelector('input[name="addressId"][checked]');
            selectedAddressId = defaultAddress ? defaultAddress.value : null;
            updatePlaceOrderButton();
            updateCodButtonState();
        });
    </script>
</body>
