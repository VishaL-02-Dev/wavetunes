<%- include('partials/admin/header') %>
    <!-- Add Chart.js, jsPDF, xlsx, moment.js, and moment-timezone -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
    <script src="/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.43/moment-timezone-with-data.min.js"></script>
    <style>
        .filter-section {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 20px;
        }

        .download-btn {
            margin-left: 10px;
        }

        #salesChart {
            max-height: 400px;
            width: 100%;
        }
    </style>
    </head>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <header class="top-header">
            <div class="header-left"></div>
            <div class="header-center">
                <a href="#" class="brand-name">WaveTune</a>
            </div>
            <div class="header-right">
                <a id="logout-button" class="logout-btn" href="/admin/logout">Logout</a>
            </div>
        </header>

        <!-- Content Area -->
        <div class="content-wrapper">
            <div class="container-fluid">
                <!-- Welcome Section -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Dashboard</h2>
                    <div>
                        <span class="text-white">Welcome, <%= admin.fname %>
                                <%= admin.lname %>!</span>
                    </div>
                </div>

                <!-- Stats Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Users</h5>
                                <p class="card-text">
                                    <%= stats.totalUsers %>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Products</h5>
                                <p class="card-text">
                                    <%= stats.totalProducts %>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Orders</h5>
                                <p class="card-text">
                                    <%= stats.totalOrders %>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Revenue</h5>
                                <p class="card-text" id="totalRevenue">Rs.<%= stats.totalRevenue.toFixed(2) %>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sales Report Section -->
                <div class="card bg-dark text-white mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Sales Report</h5>
                        <div class="filter-section">
                            <select id="periodFilter" class="form-select bg-dark text-white" style="width: 200px;">
                                <option value="monthly">Monthly</option>
                                <option value="weekly">Weekly</option>
                                <option value="daily">Daily</option>
                            </select>
                            <button id="downloadPdf" class="btn btn-primary download-btn">Download PDF</button>
                            <button id="downloadExcel" class="btn btn-success download-btn">Download Excel</button>
                        </div>
                        <canvas id="salesChart" height="100"></canvas>
                    </div>
                </div>

                <!-- Sales Data Table -->
                <div class="card bg-dark text-white mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Sales Data</h5>
                        <table id="salesTable" class="table table-dark table-hover">
                            <thead>
                                <tr>
                                    <th>SlNo:</th>
                                    <th>Date</th>
                                    <th>Total Sales (Rs.)</th>
                                    <th>Order Count</th>
                                </tr>
                            </thead>
                            <tbody id="salesTableBody"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Recent Orders -->
                <div class="card bg-dark text-white">
                    <div class="card-body">
                        <h5 class="card-title">Recent Orders</h5>
                        <% if (recentOrders && recentOrders.length> 0) { %>
                            <table class="table table-dark table-hover">
                                <thead>
                                    <tr>
                                        <th>SlNo:</th>
                                        <th>Order ID</th>
                                        <th>User</th>
                                        <th>Total</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% recentOrders.forEach((order, index)=> { %>
                                        <tr>
                                            <td>
                                                <%= index + 1 %>.
                                            </td>
                                            <td>
                                                <%= order.orderId %>
                                            </td>
                                            <td>
                                                <%= order.userId.fname %>
                                                    <%= order.userId.lname %>
                                            </td>
                                            <td>Rs.<%= order.totalAmount.toFixed(2) %>
                                            </td>
                                            <td>
                                                <span
                                                    class="badge <%= order.status === 'delivered' ? 'bg-success' : order.status === 'pending' ? 'bg-warning' : 'bg-danger' %>">
                                                    <%= order.status %>
                                                </span>
                                            </td>
                                            <td>
                                                <%= new Date(order.createdAt).toLocaleDateString() %>
                                            </td>
                                        </tr>
                                        <% }) %>
                                </tbody>
                            </table>
                            <% } else { %>
                                <p class="text-center text-gray-400">No recent orders found.</p>
                                <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Chart.js setup
        let salesChartInstance = null;

        function updateChart(labels, sales, period) {
            const ctx = document.getElementById('salesChart').getContext('2d');

            if (salesChartInstance) {
                salesChartInstance.destroy();
            }

            moment.tz.setDefault('Asia/Kolkata');
            const formattedLabels = labels.map(label => {
                if (period === 'daily') {
                    return moment(label).format('MMM DD, YYYY');
                } else if (period === 'weekly') {
                    const [year, week] = label.split('-Wk');
                    const startDate = moment().year(year).week(week).startOf('week');
                    return `${startDate.format('MMM DD')} - ${startDate.endOf('week').format('MMM DD, YYYY')}`;
                } else {
                    return moment(label, 'YYYY-MM').format('MMM YYYY');
                }
            });

            if (period === 'daily') {
                const todayStr = moment().format('YYYY-MM-DD');
                if (!labels.includes(todayStr)) {
                    labels.push(todayStr);
                    sales.push('0.00');
                    formattedLabels.push(moment().format('MMM DD, YYYY'));
                }
            }

            salesChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: formattedLabels,
                    datasets: [{
                        label: 'Sales (Rs.)',
                        data: sales,
                        borderColor: '#0d6efd',
                        backgroundColor: 'rgba(13, 110, 253, 0.5)',
                        borderWidth: 3,
                        pointBackgroundColor: '#0d6efd',
                        pointBorderColor: '#ffffff',
                        pointRadius: 5,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Revenue (Rs.)',
                                color: '#ffffff',
                                font: { size: 14 }
                            },
                            ticks: {
                                color: '#ffffff',
                                callback: value => `Rs.${value.toFixed(2)}`
                            },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        },
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: period.charAt(0).toUpperCase() + period.slice(1),
                                color: '#ffffff',
                                font: { size: 14 }
                            },
                            ticks: {
                                color: '#ffffff',
                                maxRotation: 45,
                                minRotation: 45
                            },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: { color: '#ffffff', font: { size: 14 } }
                        },
                        tooltip: {
                            callbacks: {
                                label: context => `Rs.${parseFloat(context.raw).toFixed(2)}`
                            }
                        }
                    }
                }
            });
        }

        function updateTable(salesData) {
            const tbody = document.getElementById('salesTableBody');
            tbody.innerHTML = '';
            salesData.forEach((item, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${moment(item.date).tz('Asia/Kolkata').format('MMM DD, YYYY')}</td>
                    <td>Rs.${parseFloat(item.totalSales).toFixed(2)}</td>
                    <td>${item.orderCount}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateTotalRevenue(period) {
            fetch(`/admin/sales-report-details?period=${period}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const totalRevenue = data.salesData.reduce((sum, item) => sum + parseFloat(item.totalSales), 0);
                        document.getElementById('totalRevenue').textContent = `Rs.${totalRevenue.toFixed(2)}`;
                    }
                })
                .catch(error => {
                    console.error('Error updating total revenue:', error);
                });
        }

        function fetchSalesData(period) {
            Swal.fire({ title: 'Loading...', allowOutsideClick: false });
            Swal.showLoading();
            fetch(`/admin/sales-report?period=${period}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    Swal.close();
                    if (data.success) {
                        updateChart(data.chartData.labels, data.chartData.sales, period);
                        updateTable(data.salesData);
                        updateTotalRevenue(period); // Update total revenue for the period
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                })
                .catch(error => {
                    Swal.close();
                    Swal.fire('Error', 'Failed to load sales data', 'error');
                });
        }

        // Download PDF
        document.getElementById('downloadPdf').addEventListener('click', () => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const period = document.getElementById('periodFilter').value;

            Swal.fire({
                title: 'Generating PDF...',
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch(`/admin/sales-report-details?period=${period}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    Swal.close();
                    console.log('PDF Data Response:', JSON.stringify(data, null, 2));

                    if (!data.success) {
                        Swal.fire('Error', data.message || 'Failed to fetch sales details', 'error');
                        return;
                    }

                    const reportTitle = `WaveTune Sales Report (${period.charAt(0).toUpperCase() + period.slice(1)})`;
                    doc.setFontSize(16);
                    doc.text(reportTitle, 14, 20);

                    doc.setFontSize(12);
                    doc.text('Sales Summary', 14, 30);
                    const salesTableData = data.salesData.map((item, index) => [
                        index + 1,
                        moment(item.date).tz('Asia/Kolkata').format('MMM DD, YYYY'),
                        `Rs.${parseFloat(item.totalSales).toFixed(2)}`,
                        item.orderCount
                    ]);

                    if (salesTableData.length === 0) {
                        doc.setFontSize(10);
                        doc.text('No sales data available for this period.', 14, 40);
                    } else {
                        doc.autoTable({
                            head: [['SlNo:', 'Date', 'Total Sales (Rs.)', 'Order Count']],
                            body: salesTableData,
                            startY: 35,
                            theme: 'grid',
                            styles: { textColor: [0, 0, 0], fillColor: [255, 255, 255], fontSize: 10 },
                            headStyles: { fillColor: [13, 110, 253], textColor: [255, 255, 255] },
                            columnStyles: {
                                0: { cellWidth: 20 },
                                1: { cellWidth: 50 },
                                2: { cellWidth: 50 },
                                3: { cellWidth: 40 }
                            }
                        });
                    }

                    let finalY = salesTableData.length === 0 ? 50 : doc.lastAutoTable.finalY + 10;
                    doc.setFontSize(12);
                    doc.text('Detailed Order List', 14, finalY);
                    finalY += 5;

                    const orderTableData = data.orders.map((order, index) => [
                        index + 1,
                        order.orderId,
                        `${order.userId?.fname || 'Unknown'} ${order.userId?.lname || 'User'}`,
                        `Rs.${parseFloat(order.totalAmount).toFixed(2)}`,
                        order.status,
                        moment(order.createdAt).tz('Asia/Kolkata').format('MMM DD, YYYY')
                    ]);

                    if (orderTableData.length === 0) {
                        doc.setFontSize(10);
                        doc.text('No orders found for this period.', 14, finalY + 5);
                    } else {
                        doc.autoTable({
                            head: [['SlNo:', 'Order ID', 'User', 'Total (Rs.)', 'Status', 'Date']],
                            body: orderTableData,
                            startY: finalY,
                            theme: 'grid',
                            styles: { textColor: [0, 0, 0], fillColor: [255, 255, 255], fontSize: 10 },
                            headStyles: { fillColor: [13, 110, 253], textColor: [255, 255, 255] },
                            columnStyles: {
                                0: { cellWidth: 20 },
                                1: { cellWidth: 40 },
                                2: { cellWidth: 50 },
                                3: { cellWidth: 30 },
                                4: { cellWidth: 30 },
                                5: { cellWidth: 40 }
                            }
                        });
                    }

                    finalY = orderTableData.length === 0 ? finalY + 15 : doc.lastAutoTable.finalY + 10;
                    doc.setFontSize(12);
                    const totalRevenue = data.salesData.reduce((sum, item) => sum + parseFloat(item.totalSales), 0);
                    doc.text(`Total Revenue: Rs.${totalRevenue.toFixed(2)}`, 14, finalY);

                    doc.save(`sales-report-${period}-${moment().tz('Asia/Kolkata').format('YYYYMMDD')}.pdf`);
                })
                .catch(error => {
                    Swal.close();
                    console.error('PDF Generation Error:', error);
                    Swal.fire('Error', 'Failed to generate PDF: ' + error.message, 'error');
                });
        });

        // Download Excel
        document.getElementById('downloadExcel').addEventListener('click', () => {
            const period = document.getElementById('periodFilter').value;
            const tableRows = document.querySelectorAll('#salesTableBody tr');

            if (tableRows.length === 0) {
                Swal.fire('Error', 'No sales data available to export.', 'error');
                return;
            }

            const tableData = Array.from(tableRows).map((row, index) => {
                const cells = row.querySelectorAll('td');
                return {
                    'SlNo:': cells[0]?.textContent?.trim() || `${(index + 1).toString()}.`,
                    Date: cells[1]?.textContent?.trim() || '',
                    'Total Sales': cells[2]?.textContent?.trim().replace('Rs.', '') || '',
                    'Order Count': cells[3]?.textContent?.trim() || ''
                };
            });

            const isValidData = tableData.every(row =>
                row['SlNo:'] && row.Date && row['Total Sales'] && row['Order Count'] &&
                !isNaN(parseFloat(row['Total Sales'])) && !isNaN(parseInt(row['Order Count']))
            );

            if (!isValidData) {
                Swal.fire('Error', 'Invalid or incomplete sales data. Please refresh and try again.', 'error');
                return;
            }

            try {
                const ws = XLSX.utils.json_to_sheet(tableData);
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, 'Sales Report');
                XLSX.write(wb, `sales-report-${period}-${typeof moment.tz !== 'undefined'
                    ? moment().tz('Asia/Kolkata').format('YYYYMMDD')
                    : new Date().toISOString().split('T')[0]}.xlsx`);
            } catch (error) {
                console.error('Excel Export Error:', {
                    message: error.message,
                    stack: error.stack,
                    tableData
                });
                Swal.fire('Error', 'Failed to export Excel file: ' + error.message, 'error');
            }
        });

        // Initialize with monthly data
        document.addEventListener('DOMContentLoaded', () => {
            fetchSalesData('monthly');

            document.getElementById('periodFilter').addEventListener('change', (e) => {
                fetchSalesData(e.target.value);
            });

            const logoutButton = document.getElementById('logout-button');
            if (logoutButton) {
                logoutButton.addEventListener('click', (event) => {
                    event.preventDefault();
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You will be logged out!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, logout!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch('/admin/logout', {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json'
                                },
                                credentials: 'include'
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            title: 'Logged Out!',
                                            text: 'You have been successfully logged out.',
                                            icon: 'success',
                                            timer: 1500,
                                            showConfirmButton: false
                                        }).then(() => {
                                            window.location.href = data.redirectUrl;
                                        });
                                    } else {
                                        Swal.fire('Error', data.message, 'error');
                                    }
                                })
                                .catch(error => {
                                    Swal.fire('Error', 'Something went wrong!', 'error');
                                });
                        }
                    });
                });
            }
        });
    </script>
    <%- include('partials/admin/footer') %>
        </body>

        </html>