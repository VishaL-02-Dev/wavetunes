<%- include('partials/admin/header') %>
    <!-- Add Chart.js, jsPDF, xlsx, moment.js, and moment-timezone -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
    <script src="/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.43/moment-timezone-with-data.min.js"></script>
    <style>
        .filter-section {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 20px;
        }

        .download-btn {
            margin-left: 10px;
        }

        #salesChart {
            max-height: 400px;
            width: 100%;
        }
    </style>
    </head>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <header class="top-header">
            <div class="header-left"></div>
            <div class="header-center">
                <a href="#" class="brand-name">WaveTune</a>
            </div>
            <div class="header-right">
                <a id="logout-button" class="logout-btn" href="/admin/logout">Logout</a>
            </div>
        </header>

        <!-- Content Area -->
        <div class="content-wrapper">
            <div class="container-fluid">
                <!-- Welcome Section -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Dashboard</h2>
                    <div>
                        <span class="text-white">Welcome, <%= admin.fname %>
                                <%= admin.lname %>!</span>
                    </div>
                </div>

                <!-- Stats Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Users</h5>
                                <p class="card-text">
                                    <%= stats.totalUsers %>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Products</h5>
                                <p class="card-text">
                                    <%= stats.totalProducts %>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Orders</h5>
                                <p class="card-text">
                                    <%= stats.totalOrders %>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-dark text-white">
                            <div class="card-body">
                                <h5 class="card-title">Total Revenue</h5>
                                <p class="card-text" id="totalRevenue">Rs.<%= stats.totalRevenue.toFixed(2) %>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sales Report Section -->
                <div class="card bg-dark text-white mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Sales Report</h5>
                        <div class="filter-section">
                            <select id="periodFilter" class="form-select bg-dark text-white" style="width: 200px;">
                                <option value="monthly">Monthly</option>
                                <option value="weekly">Weekly</option>
                                <option value="daily">Daily</option>
                            </select>
                            <button id="downloadPdf" class="btn btn-primary download-btn">Download PDF</button>
                            <button id="downloadExcel" class="btn btn-success download-btn">Download Excel</button>
                        </div>
                        <canvas id="salesChart" height="100"></canvas>
                    </div>
                </div>

                <!-- Sales Data Table -->
                <div class="card bg-dark text-white mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Sales Data</h5>
                        <table id="salesTable" class="table table-dark table-hover">
                            <thead>
                                <tr>
                                    <th>SlNo:</th>
                                    <th>Date</th>
                                    <th>Total Sales (Rs.)</th>
                                    <th>Order Count</th>
                                </tr>
                            </thead>
                            <tbody id="salesTableBody"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Top 10 Best-Selling Products -->
                <div class="card bg-dark text-white mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Top 10 Best-Selling Products</h5>
                        <table id="topProductsTable" class="table table-dark table-hover">
                            <thead>
                                <tr>
                                    <th>SlNo:</th>
                                    <th>Product Name</th>
                                    <th>Category</th>
                                    <th>Units Sold</th>
                                    <th>Total Revenue (Rs.)</th>
                                </tr>
                            </thead>
                            <tbody id="topProductsTableBody">
                                <% if (topProducts && topProducts.length> 0) { %>
                                    <% topProducts.forEach((product, index)=> { %>
                                        <tr>
                                            <td>
                                                <%= index + 1 %>.
                                            </td>
                                            <td>
                                                <%= product.name %>
                                            </td>
                                            <td>
                                                <%= product.category.name %>
                                            </td>
                                            <td>
                                                <%= product.unitsSold %>
                                            </td>
                                            <td>Rs.<%= product.totalRevenue.toFixed(2) %>
                                            </td>
                                        </tr>
                                        <% }) %>
                                            <% } else { %>
                                                <tr>
                                                    <td colspan="5" class="text-center">No products found.</td>
                                                </tr>
                                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Recent Orders -->
                <div class="card bg-dark text-white">
                    <div class="card-body">
                        <h5 class="card-title">Recent Orders</h5>
                        <% if (recentOrders && recentOrders.length> 0) { %>
                            <table class="table table-dark table-hover">
                                <thead>
                                    <tr>
                                        <th>SlNo:</th>
                                        <th>Order ID</th>
                                        <th>User</th>
                                        <th>Total</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% recentOrders.forEach((order, index)=> { %>
                                        <tr>
                                            <td>
                                                <%= index + 1 %>.
                                            </td>
                                            <td>
                                                <%= order.orderId %>
                                            </td>
                                            <td>
                                                <%= order.userId.fname %>
                                                    <%= order.userId.lname %>
                                            </td>
                                            <td>Rs.<%= order.totalAmount.toFixed(2) %>
                                            </td>
                                            <td>
                                                <span
                                                    class="badge <%= order.status === 'delivered' ? 'bg-success' : order.status === 'pending' ? 'bg-warning' : 'bg-danger' %>">
                                                    <%= order.status %>
                                                </span>
                                            </td>
                                            <td>
                                                <%= new Date(order.createdAt).toLocaleDateString() %>
                                            </td>
                                        </tr>
                                        <% }) %>
                                </tbody>
                            </table>
                            <% } else { %>
                                <p class="text-center text-gray-400">No recent orders found.</p>
                                <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Chart.js setup
        let salesChartInstance = null;

        function updateChart(labels, sales, period) {
            const ctx = document.getElementById('salesChart').getContext('2d');

            if (salesChartInstance) {
                salesChartInstance.destroy();
            }

            moment.tz.setDefault('Asia/Kolkata');
            const formattedLabels = labels.map(label => {
                if (period === 'daily') {
                    return moment(label).format('MMM DD, YYYY');
                } else if (period === 'weekly') {
                    const [year, week] = label.split('-Wk');
                    const startDate = moment().year(year).week(week).startOf('week');
                    return `${startDate.format('MMM DD')} - ${startDate.endOf('week').format('MMM DD, YYYY')}`;
                } else {
                    return moment(label, 'YYYY-MM').format('MMM YYYY');
                }
            });

            if (period === 'daily') {
                const todayStr = moment().format('YYYY-MM-DD');
                if (!labels.includes(todayStr)) {
                    labels.push(todayStr);
                    sales.push('0.00');
                    formattedLabels.push(moment().format('MMM DD, YYYY'));
                }
            }

            salesChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: formattedLabels,
                    datasets: [{
                        label: 'Sales (Rs.)',
                        data: sales,
                        borderColor: '#0d6efd',
                        backgroundColor: 'rgba(13, 110, 253, 0.5)',
                        borderWidth: 3,
                        pointBackgroundColor: '#0d6efd',
                        pointBorderColor: '#ffffff',
                        pointRadius: 5,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Revenue (Rs.)',
                                color: '#ffffff',
                                font: { size: 14 }
                            },
                            ticks: {
                                color: '#ffffff',
                                callback: value => `Rs.${value.toFixed(2)}`
                            },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        },
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: period.charAt(0).toUpperCase() + period.slice(1),
                                color: '#ffffff',
                                font: { size: 14 }
                            },
                            ticks: {
                                color: '#ffffff',
                                maxRotation: 45,
                                minRotation: 45
                            },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: { color: '#ffffff', font: { size: 14 } }
                        },
                        tooltip: {
                            callbacks: {
                                label: context => `Rs.${parseFloat(context.raw).toFixed(2)}`
                            }
                        }
                    }
                }
            });
        }

        function updateTable(salesData) {
            const tbody = document.getElementById('salesTableBody');
            tbody.innerHTML = '';
            salesData.forEach((item, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
            <td>${index + 1}</td>
            <td>${moment(item.date).tz('Asia/Kolkata').format('MMM DD, YYYY')}</td>
            <td>Rs.${parseFloat(item.totalSales).toFixed(2)}</td>
            <td>${item.orderCount}</td>
        `;
                tbody.appendChild(row);
            });
        }

        function updateTotalRevenue(period) {
            fetch(`/admin/sales-report-details?period=${period}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const totalRevenue = data.salesData.reduce((sum, item) => sum + parseFloat(item.totalSales), 0);
                        document.getElementById('totalRevenue').textContent = `Rs.${totalRevenue.toFixed(2)}`;
                    }
                })
                .catch(error => {
                    console.error('Error updating total revenue:', error);
                });
        }

        function fetchSalesData(period) {
            Swal.fire({ title: 'Loading...', allowOutsideClick: false });
            Swal.showLoading();
            fetch(`/admin/sales-report?period=${period}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    Swal.close();
                    if (data.success) {
                        updateChart(data.chartData.labels, data.chartData.sales, period);
                        updateTable(data.salesData);
                        updateTotalRevenue(period);
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                })
                .catch(error => {
                    Swal.close();
                    Swal.fire('Error', 'Failed to load sales data', 'error');
                });
        }

        // Download PDF
        document.getElementById('downloadPdf').addEventListener('click', () => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ orientation: 'landscape' });
            const period = document.getElementById('periodFilter').value;

            Swal.fire({
                title: 'Generating PDF...',
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch(`/admin/sales-report-details?period=${period}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    Swal.close();
                    console.log('PDF Data Response:', JSON.stringify(data, null, 2));

                    if (!data.success) {
                        Swal.fire('Error', data.message || 'Failed to fetch sales details', 'error');
                        return;
                    }

                    const reportTitle = `WaveTune Sales Report (${period.charAt(0).toUpperCase() + period.slice(1)})`;
                    doc.setFontSize(16);
                    doc.text(reportTitle, 14, 20);

                    doc.setFontSize(12);
                    doc.text('Sales Summary', 14, 30);
                    const salesTableData = data.salesData.map((item, index) => [
                        index + 1,
                        moment(item.date).tz('Asia/Kolkata').format('MMM DD, YYYY'),
                        `Rs.${parseFloat(item.totalSales).toFixed(2)}`,
                        item.orderCount
                    ]);

                    if (salesTableData.length === 0) {
                        doc.setFontSize(10);
                        doc.text('No sales data available for this period.', 14, 40);
                    } else {
                        doc.autoTable({
                            head: [['SlNo:', 'Date', 'Total Sales (Rs.)', 'Order Count']],
                            body: salesTableData,
                            startY: 35,
                            theme: 'grid',
                            styles: { textColor: [0, 0, 0], fillColor: [255, 255, 255], fontSize: 9 },
                            headStyles: { fillColor: [13, 110, 253], textColor: [255, 255, 255] },
                            columnStyles: {
                                0: { cellWidth: 30 },
                                1: { cellWidth: 60 },
                                2: { cellWidth: 60 },
                                3: { cellWidth: 50 }
                            },
                            margin: { left: 14, right: 14 }
                        });
                    }

                    let finalY = salesTableData.length === 0 ? 50 : doc.lastAutoTable.finalY + 10;
                    doc.setFontSize(12);
                    doc.text('Detailed Order List', 14, finalY);
                    finalY += 5;

                    const orderTableData = data.orders.map((order, index) => [
                        index + 1,
                        order.orderId,
                        `${order.userId?.fname || 'Unknown'} ${order.userId?.lname || 'User'}`,
                        `Rs.${parseFloat(order.totalAmount).toFixed(2)}`,
                        order.paymentMethod || 'N/A',
                        `Rs.${parseFloat(order.discountAmount || 0).toFixed(2)}`,
                        order.status,
                        moment(order.createdAt).tz('Asia/Kolkata').format('MMM DD, YYYY')
                    ]);

                    if (orderTableData.length === 0) {
                        doc.setFontSize(10);
                        doc.text('No orders found for this period.', 14, finalY + 5);
                    } else {
                        doc.autoTable({
                            head: [['SlNo:', 'Order ID', 'User', 'Total (Rs.)', 'Payment Method', 'Discount (Rs.)', 'Status', 'Date']],
                            body: orderTableData,
                            startY: finalY,
                            theme: 'grid',
                            styles: { textColor: [0, 0, 0], fillColor: [255, 255, 255], fontSize: 7, cellPadding: 2 },
                            headStyles: { fillColor: [13, 110, 253], textColor: [255, 255, 255], fontSize: 8 },
                            columnStyles: {
                                0: { cellWidth: 20 },
                                1: { cellWidth: 40 },
                                2: { cellWidth: 50 },
                                3: { cellWidth: 30 },
                                4: { cellWidth: 35 },
                                5: { cellWidth: 30 },
                                6: { cellWidth: 30 },
                                7: { cellWidth: 40 }
                            },
                            margin: { left: 14, right: 14 },
                            pageBreak: 'auto',
                            tableWidth: 'auto',
                            didParseCell: (data) => {
                                if (data.section === 'body') {
                                    data.cell.styles.valign = 'middle';
                                    data.cell.styles.halign = data.column.index === 0 ? 'center' : 'left';
                                }
                            }
                        });
                    }

                    finalY = orderTableData.length === 0 ? finalY + 15 : doc.lastAutoTable.finalY + 10;
                    doc.setFontSize(12);
                    const totalRevenue = data.salesData.reduce((sum, item) => sum + parseFloat(item.totalSales), 0);
                    const totalDiscount = data.orders.reduce((sum, order) => sum + parseFloat(order.discountAmount || 0), 0);
                    doc.text(`Total Revenue: Rs.${totalRevenue.toFixed(2)}`, 14, finalY);
                    doc.text(`Total Discount: Rs.${totalDiscount.toFixed(2)}`, 14, finalY + 10);

                    doc.save(`sales-report-${period}-${moment().tz('Asia/Kolkata').format('YYYYMMDD')}.pdf`);
                })
                .catch(error => {
                    Swal.close();
                    console.error('PDF Generation Error:', error);
                    Swal.fire('Error', 'Failed to generate PDF: ' + error.message, 'error');
                });
        });

        // Download Excel
        document.getElementById('downloadExcel').addEventListener('click', () => {
            const period = document.getElementById('periodFilter').value;

            if (typeof XLSX === 'undefined') {
                console.error('XLSX library is not loaded');
                Swal.fire('Error', 'Excel export library failed to load. Please try again later.', 'error');
                return;
            }

            Swal.fire({
                title: 'Generating Excel...',
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch(`/admin/sales-report-details?period=${period}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    Swal.close();

                    if (!data.success) {
                        Swal.fire('Error', data.message || 'Failed to fetch sales details', 'error');
                        return;
                    }

                    try {
                        // Sales Summary Data
                        const salesTableData = data.salesData.map((item, index) => ({
                            'SlNo:': index + 1,
                            Date: moment(item.date).tz('Asia/Kolkata').format('MMM DD, YYYY'),
                            'Total Sales (Rs.)': parseFloat(item.totalSales).toFixed(2),
                            'Order Count': item.orderCount
                        }));

                        // Detailed Order List Data
                        const orderTableData = data.orders.map((order, index) => ({
                            'SlNo:': index + 1,
                            'Order ID': order.orderId,
                            User: `${order.userId?.fname || 'Unknown'} ${order.userId?.lname || 'User'}`,
                            'Total (Rs.)': parseFloat(order.totalAmount).toFixed(2),
                            'Payment Method': order.paymentMethod || 'N/A',
                            'Discount (Rs.)': parseFloat(order.discountAmount || 0).toFixed(2),
                            Status: order.status,
                            Date: moment(order.createdAt).tz('Asia/Kolkata').format('MMM DD, YYYY')
                        }));

                        // Summary Metrics
                        const totalRevenue = data.salesData.reduce((sum, item) => sum + parseFloat(item.totalSales), 0).toFixed(2);
                        const totalDiscount = data.orders.reduce((sum, order) => sum + parseFloat(order.discountAmount || 0), 0).toFixed(2);
                        const summaryData = [
                            { Metric: 'Total Revenue (Rs.)', Value: totalRevenue },
                            { Metric: 'Total Discount (Rs.)', Value: totalDiscount }
                        ];

                        // Create workbook
                        const wb = XLSX.utils.book_new();

                        // Sales Summary Sheet
                        if (salesTableData.length > 0) {
                            const wsSales = XLSX.utils.json_to_sheet(salesTableData);
                            XLSX.utils.book_append_sheet(wb, wsSales, 'Sales Summary');
                        } else {
                            const wsSales = XLSX.utils.json_to_sheet([{ Message: 'No sales data available for this period.' }]);
                            XLSX.utils.book_append_sheet(wb, wsSales, 'Sales Summary');
                        }

                        // Detailed Order List Sheet
                        if (orderTableData.length > 0) {
                            const wsOrders = XLSX.utils.json_to_sheet(orderTableData);
                            XLSX.utils.book_append_sheet(wb, wsOrders, 'Detailed Orders');
                        } else {
                            const wsOrders = XLSX.utils.json_to_sheet([{ Message: 'No orders found for this period.' }]);
                            XLSX.utils.book_append_sheet(wb, wsOrders, 'Detailed Orders');
                        }

                        // Summary Metrics Sheet
                        const wsSummary = XLSX.utils.json_to_sheet(summaryData);
                        XLSX.utils.book_append_sheet(wb, wsSummary, 'Summary');

                        // Generate filename
                        const fileName = `sales-report-${period}-${moment().tz('Asia/Kolkata').format('YYYYMMDD')}.xlsx`;

                        // Write file
                        XLSX.writeFile(wb, fileName);
                    } catch (error) {
                        console.error('Excel Export Error:', {
                            message: error.message,
                            stack: error.stack,
                            salesDataLength: data.salesData?.length || 0,
                            ordersLength: data.orders?.length || 0
                        });
                        Swal.fire('Error', `Failed to export Excel file: ${error.message}`, 'error');
                    }
                })
                .catch(error => {
                    Swal.close();
                    console.error('Fetch Error:', error);
                    Swal.fire('Error', 'Failed to fetch sales data: ' + error.message, 'error');
                });
        });

        // Initialize with monthly data and fetch top products
        document.addEventListener('DOMContentLoaded', () => {
            fetchSalesData('monthly');

            // Fetch top 10 best-selling products
            fetch('/admin/top-products', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const tbody = document.getElementById('topProductsTableBody');
                        tbody.innerHTML = '';
                        if (data.topProducts.length > 0) {
                            data.topProducts.forEach((product, index) => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                            <td>${index + 1}.</td>
                            <td>${product.name}</td>
                            <td>${product.category}</td>
                            <td>${product.unitsSold}</td>
                            <td>Rs.${parseFloat(product.totalRevenue).toFixed(2)}</td>
                        `;
                                tbody.appendChild(row);
                            });
                        } else {
                            tbody.innerHTML = '<tr><td colspan="5" class="text-center">No products found.</td></tr>';
                        }
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                })
                .catch(error => {
                    Swal.fire('Error', 'Failed to load top products', 'error');
                });

            document.getElementById('periodFilter').addEventListener('change', (e) => {
                fetchSalesData(e.target.value);
            });

            const logoutButton = document.getElementById('logout-button');
            if (logoutButton) {
                logoutButton.addEventListener('click', (event) => {
                    event.preventDefault();
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You will be logged out!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, logout!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch('/admin/logout', {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json'
                                },
                                credentials: 'include'
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            title: 'Logged Out!',
                                            text: 'You have been successfully logged out.',
                                            icon: 'success',
                                            timer: 1500,
                                            showConfirmButton: false
                                        }).then(() => {
                                            window.location.href = data.redirectUrl;
                                        });
                                    } else {
                                        Swal.fire('Error', data.message, 'error');
                                    }
                                })
                                .catch(error => {
                                    Swal.fire('Error', 'Something went wrong!', 'error');
                                });
                        }
                    });
                });
            }
        });
    </script>
    <%- include('partials/admin/footer') %>
        </body>

        </html>