<%- include('partials/admin/header') %>

    <div class="admin-layout">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="px-3 py-2">
                <h4>Admin Panel</h4>
            </div>
            <ul class="sidebar-menu">
                <li>
                    <a href="/admin/dashboard" class="<%= currentPage === 'dashboard' ? 'active' : '' %>">
                        <i class="bi bi-speedometer2"></i> Dashboard
                    </a>
                </li>
                <li>
                    <a href="/admin/customers" class="<%= currentPage === 'users' ? 'active' : '' %>">
                        <i class="bi bi-people"></i> Users
                    </a>
                </li>
                <li>
                    <a href="/admin/products" class="<%= currentPage === 'products' ? 'active' : '' %>">
                        <i class="bi bi-box"></i> Products
                    </a>
                </li>
                <li>
                    <a href="/admin/orders" class="<%= currentPage === 'orders' ? 'active' : '' %>">
                        <i class="bi bi-cart"></i> Orders
                    </a>
                </li>
                <li>
                    <a href="/admin/categories" class="<%= currentPage === 'categories' ? 'active' : '' %>">
                        <i class="bi bi-tags"></i> Categories
                    </a>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <header class="top-header">
                <div class="header-left"></div>
                <div class="header-center">
                    <a href="#" class="brand-name">WaveTune</a>
                </div>
                <div class="header-right">
                    <a id="logout-button" class="logout-btn" href="/admin/logout">Logout</a>
                </div>
            </header>

            <div class="content-wrapper">
                <div class="container-fluid">
                    <h2>Manage Products</h2>
                    <span class="text-white">Total Products: <%= totalCount %></span>
                    <div>
                        <button class="btn btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#addProductModal">
                            <i class="bi bi-plus-lg"></i> Add Product
                        </button>
                    </div>
                </div>
                <!-- Search Bar -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <form action="" method="GET" class="d-flex mt-4">
                            <input type="text" name="search" class="form-control"
                                placeholder="Search products by name, brand, or description..."
                                value="<%= typeof search !== 'undefined' ? search : '' %>">
                            <button type="submit" class="btn btn-primary ms-2">
                                <i class="bi bi-search"></i>
                            </button>
                            <% if (typeof search !=='undefined' && search) { %>
                                <a href="/admin/products" class="btn btn-outline-secondary ms-2">Clear</a>
                                <% } %>
                        </form>
                    </div>
                </div>
                <div class="content-wrapper">
                    <div class="container-fluid">
                        <table class="table table-bordered table-hover ">
                            <thead class="table-dark">
                                <tr>
                                    <th>Sl.No</th>
                                    <th>Image</th>
                                    <th>Name</th>
                                    <th>Brand</th>
                                    <th>Category</th>
                                    <th>Desription</th>
                                    <th>Specifications</th>
                                    <th>Price</th>
                                    <th>Stock</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% products.forEach((product, index)=> { %>
                                    <tr>
                                        <td>
                                            <%= ((currentPage || 1) - 1) * (itemsPerPage || 5) + index + 1 %>
                                        </td>
                                        <td>
                                            <% if (product.images) { %>
                                                <img src="<%= product.images[0].url %>" alt="<%= product.name %>"
                                                    width="200">
                                                <% } else { %>
                                                    <p>No image available</p>
                                                    <% } %>
                                        </td>
                                        <td>
                                            <%= product.name %>
                                        </td>
                                        <td>
                                            <%= product.brand %>
                                        </td>
                                        <td>
                                            <%= product.category ? product.category.name : "No Category" %>
                                        </td>
                                        <td>
                                            <%= product.description %>
                                        </td>
                                        <td>
                                            <%= product.specifications %>
                                        </td>
                                        <td>â‚¹<%= product.price %>
                                        </td>
                                        <td>
                                            <%= product.stock %>
                                        </td>
                                        <td>
                                            <button class="btn btn-warning btn-sm"
                                                onclick="editProduct('<%= product._id %>')">
                                                <i class="bi bi-pencil-square"></i>
                                            </button>
                                            <button class="btn btn-danger btn-sm"
                                                onclick="deleteProduct('<%= product._id %>')">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                    <% }) %>
                            </tbody>
                        </table>
                        <% if (totalPages> 1) { %>
                            <nav aria-label="Page navigation" class="mt-4">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                        <a class="page-link"
                                            href="?page=<%= currentPage - 1 %><%= typeof search !== 'undefined' && search ? '&search=' + encodeURIComponent(search) : '' %>"
                                            tabindex="-1">Previous</a>
                                    </li>

                                    <% for(let i=1; i <=totalPages; i++) { %>
                                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                            <a class="page-link"
                                                href="?page=<%= i %><%= typeof search !== 'undefined' && search ? '&search=' + encodeURIComponent(search) : '' %>">
                                                <%= i %>
                                            </a>
                                        </li>
                                        <% } %>

                                            <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                                <a class="page-link"
                                                    href="?page=<%= currentPage + 1 %><%= typeof search !== 'undefined' && search ? '&search=' + encodeURIComponent(search) : '' %>">Next</a>
                                            </li>
                                </ul>
                            </nav>
                            <% } %>
                    </div>
                </div>
            </div>

            <!-- Add Product Modal -->
            <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title text-black" id="addProductModalLabel">Add New Product</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form method="post" action="/admin/products" id="addProductForm"
                                enctype="multipart/form-data">
                                <div class="mb-3">
                                    <label for="productName" class="form-label text-black">Product Name</label>
                                    <input type="text" class="form-control" id="productName" name="name" required>
                                </div>

                                <div class="mb-3">
                                    <label for="productBrand" class="form-label text-black">Brand</label>
                                    <input type="text" class="form-control" id="productBrand" name="brand" required>
                                </div>

                                <div class="mb-3">
                                    <label for="productDescription" class="form-label text-black">Description</label>
                                    <textarea class="form-control" id="productDescription" name="description"
                                        required></textarea>
                                </div>

                                <div class="mb-3">
                                    <label for="productSpecification"
                                        class="form-label text-black">Specifications</label>
                                    <textarea class="form-control" id="productSpecification" name="specifications"
                                        required></textarea>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="productPrice" class="form-label text-black">Price</label>
                                        <input type="number" class="form-control" id="productPrice" name="price" min="0"
                                            required>
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label for="productStock" class="form-label text-black">Stock</label>
                                        <input type="number" class="form-control" id="productStock" name="stock" min="0"
                                            required>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="productCategory" class="form-label text-black">Category</label>
                                    <select class="form-control" id="productCategory" name="category" required>
                                        <option value="">Select Category</option>
                                        <% categories.forEach(category=> { %>
                                            <option value="<%= category._id %>">
                                                <%= category.name %>
                                            </option>
                                            <% }) %>
                                    </select>
                                </div>

                                <!-- Image input section with cropping functionality -->
                                <div class="mb-3">
                                    <label for="productImages" class="form-label text-black">Product Images (Max
                                        4)</label>
                                    <input type="file" class="form-control" id="productImages" name="images"
                                        accept="image/*" multiple>
                                    <!-- Hidden inputs to store cropped image data -->
                                    <div id="croppedImagesContainer"></div>
                                </div>

                                <!-- ADDED: Image preview and cropping section -->
                                <div class="mb-3 image-cropping-container">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div id="imageCropperContainer" style="display: none; margin-bottom: 15px;">
                                                <h6 class="text-black">Crop Image</h6>
                                                <div class="img-container" style="max-height: 300px; overflow: hidden;">
                                                    <img id="imageToCrop" src="" style="max-width: 100%;">
                                                </div>
                                                <div class="mt-2">
                                                    <button type="button" class="btn btn-sm btn-primary"
                                                        id="cropImageBtn">Crop & Save</button>
                                                    <button type="button" class="btn btn-sm btn-secondary"
                                                        id="cancelCropBtn">Cancel</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div id="croppedPreviewsContainer">
                                                <h6 class="text-black">Cropped Images</h6>
                                                <div id="croppedImagesPreviews" class="d-flex flex-wrap">
                                                    <!-- Cropped images will appear here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Add Product</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Edit Product Modal -->
            <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title text-black" id="editProductModalLabel">Edit Product</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form method="post" id="editProductForm" enctype="multipart/form-data">
                                <input type="hidden" id="editProductId" name="id">
                                <div class="mb-3">
                                    <label for="editProductName" class="form-label text-black">Product Name</label>
                                    <input type="text" class="form-control" id="editProductName" name="name" required>
                                </div>

                                <div class="mb-3">
                                    <label for="editProductBrand" class="form-label text-black">Brand</label>
                                    <input type="text" class="form-control" id="editProductBrand" name="brand" required>
                                </div>

                                <div class="mb-3">
                                    <label for="editProductSpecifications"
                                        class="form-label text-black">Specifications</label>
                                    <textarea class="form-control" id="editProductSpecification" name="specifications"
                                        required></textarea>
                                </div>

                                <div class="mb-3">
                                    <label for="editProductDescription"
                                        class="form-label text-black">Description</label>
                                    <textarea class="form-control" id="editProductDescription" name="description"
                                        required></textarea>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="editProductPrice" class="form-label text-black">Price</label>
                                        <input type="number" class="form-control" id="editProductPrice" name="price"
                                            min="0" required>
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label for="editProductStock" class="form-label text-black">Stock</label>
                                        <input type="number" class="form-control" id="editProductStock" name="stock"
                                            min="0" required>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="editProductCategory" class="form-label text-black">Category</label>
                                    <select class="form-control" id="editProductCategory" name="category" required>
                                        <option value="">Select Category</option>
                                        <% categories.forEach(category=> { %>
                                            <option value="<%= category._id %>">
                                                <%= category.name %>
                                            </option>
                                            <% }) %>
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label text-black">Existing Images</label>
                                    <div id="editExistingImagesContainer" class="d-flex flex-wrap">
                                        <!-- Existing images will be added dynamically here -->
                                    </div>
                                </div>

                                <!-- Image input section -->
                                <div class="mb-3">
                                    <label for="editProductImages" class="form-label text-black">Product Images (Max
                                        4)</label>
                                    <input type="file" class="form-control" id="editProductImages" accept="image/*"
                                        multiple>
                                    <div id="editCroppedImagesContainer"></div>
                                </div>

                                <!-- Image preview and cropping section -->
                                <div class="mb-3 image-cropping-container">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div id="editImageCropperContainer"
                                                style="display: none; margin-bottom: 15px;">
                                                <h6 class="text-black">Crop Image</h6>
                                                <div class="img-container" style="max-height: 300px; overflow: hidden;">
                                                    <img id="editImageToCrop" src="" style="max-width: 100%;">
                                                </div>
                                                <div class="mt-2">
                                                    <button type="button" class="btn btn-sm btn-primary"
                                                        id="editCropImageBtn">Crop & Save</button>
                                                    <button type="button" class="btn btn-sm btn-secondary"
                                                        id="editCancelCropBtn">Cancel</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div id="editCroppedPreviewsContainer">
                                                <h6 class="text-black">Cropped Images</h6>
                                                <div id="editCroppedImagesPreviews" class="d-flex flex-wrap">
                                                    <!-- Cropped images will appear here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Update Product</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>


        </div>
    </div>

    <!-- ADDED: Include Cropperjs CSS and JS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

    <script>
        // Global variables
        let cropper;
        let currentFileIndex = 0;
        let filesToProcess = [];
        let croppedImages = [];
        let imagesToRemove = [];

        // Initialize cropper when a file is selected
        document.getElementById('productImages').addEventListener('change', function (e) {
            filesToProcess = Array.from(e.target.files);

            if (filesToProcess.length > 4) {
                Swal.fire("Error", "Maximum 4 images allowed", "error");
                this.value = '';
                return;
            }

            // Start processing the first image
            if (filesToProcess.length > 0) {
                currentFileIndex = 0;
                processNextImage();
            }
        });

        // Process images one by one
        function processNextImage() {
            if (currentFileIndex < filesToProcess.length) {
                const file = filesToProcess[currentFileIndex];
                const reader = new FileReader();

                reader.onload = function (e) {
                    // Show the cropper container
                    const cropperContainer = document.getElementById('imageCropperContainer');
                    cropperContainer.style.display = 'block';

                    // Set the image source
                    const image = document.getElementById('imageToCrop');
                    image.src = e.target.result;

                    // Initialize cropper on the image
                    if (cropper) {
                        cropper.destroy();
                    }

                    cropper = new Cropper(image, {
                        aspectRatio: 1, // Square crop
                        viewMode: 1,
                        responsive: true,
                        restore: false
                    });
                };

                reader.readAsDataURL(file);
            }
        }

        // Handle crop button click
        document.getElementById('cropImageBtn').addEventListener('click', function () {
            if (!cropper) return;

            // Get the cropped canvas
            const canvas = cropper.getCroppedCanvas({
                width: 500,
                height: 500
            });

            // Convert canvas to blob
            canvas.toBlob(function (blob) {
                // Create a new File object from the blob
                const croppedFile = new File([blob], filesToProcess[currentFileIndex].name, {
                    type: filesToProcess[currentFileIndex].type,
                    lastModified: Date.now()
                });

                // Add to cropped images array
                croppedImages.push(croppedFile);

                // Add preview
                addCroppedImagePreview(canvas.toDataURL());

                // Move to next image or finish
                currentFileIndex++;
                if (currentFileIndex < filesToProcess.length) {
                    processNextImage();
                } else {
                    // Hide cropper when all images are processed
                    document.getElementById('imageCropperContainer').style.display = 'none';
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                    }
                }
            }, filesToProcess[currentFileIndex].type);
        });

        // Cancel crop button
        document.getElementById('cancelCropBtn').addEventListener('click', function () {
            // Skip current image and move to next
            currentFileIndex++;
            if (currentFileIndex < filesToProcess.length) {
                processNextImage();
            } else {
                // Hide cropper when all images are processed
                document.getElementById('imageCropperContainer').style.display = 'none';
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            }
        });

        // Add cropped image preview
        function addCroppedImagePreview(dataUrl) {
            const previewContainer = document.getElementById('croppedImagesPreviews');
            const previewDiv = document.createElement('div');
            previewDiv.className = 'preview-item position-relative m-1';
            previewDiv.innerHTML = `
        <img src="${dataUrl}" alt="Preview image" 
             style="width: 80px; height: 80px; object-fit: cover;">
        <button type="button" class="btn btn-danger btn-sm position-absolute" 
                style="top: 0; right: 0; padding: 0 5px;" 
                onclick="removeCroppedImage(${croppedImages.length - 1})">Ã—</button>
    `;
            previewContainer.appendChild(previewDiv);
        }

        // Remove cropped image
        function removeCroppedImage(index) {
            croppedImages.splice(index, 1);
            refreshCroppedImagePreviews();
        }

        // Refresh all cropped image previews
        function refreshCroppedImagePreviews() {
            const previewContainer = document.getElementById('croppedImagesPreviews');
            previewContainer.innerHTML = '';

            croppedImages.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const previewDiv = document.createElement('div');
                    previewDiv.className = 'preview-item position-relative m-1';
                    previewDiv.innerHTML = `
                <img src="${e.target.result}" alt="Preview image" 
                     style="width: 80px; height: 80px; object-fit: cover;">
                <button type="button" class="btn btn-danger btn-sm position-absolute" 
                        style="top: 0; right: 0; padding: 0 5px;" 
                        onclick="removeCroppedImage(${index})">Ã—</button>
            `;
                    previewContainer.appendChild(previewDiv);
                };
                reader.readAsDataURL(file);
            });
        }

        // Modify the form submission to use cropped images
        document.getElementById("addProductForm").addEventListener("submit", async function (event) {
            event.preventDefault();

            if (croppedImages.length === 0) {
                Swal.fire("Error", "Please add at least one product image", "error");
                return;
            }

            try {
                const formData = new FormData(this);

                // Remove the original file input images
                formData.delete('images');

                // Upload cropped images to Cloudinary
                const uploadedImages = await uploadImagesToCloudinary(croppedImages);

                // Add uploaded image URLs to the form data
                uploadedImages.forEach(imageUrl => {
                    formData.append('imageUrls', imageUrl);
                });

                const response = await fetch("/admin/products", {
                    method: "POST",
                    body: formData,
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire("Success", "Product added successfully!", "success")
                        .then(() => window.location.reload());
                } else {
                    Swal.fire("Error", result.message, "error");
                }
            } catch (error) {
                console.error("Error submitting form:", error);
                Swal.fire("Error", "Something went wrong!", "error");
            }
        });

        // Helper function to upload images to Cloudinary
        async function uploadImagesToCloudinary(files) {
            console.log("Starting upload to Cloudinary with files:", files);

            const uploadPromises = Array.from(files).map(file => {
                console.log("Preparing to upload file:", file.name);
                const formData = new FormData();
                formData.append("file", file);
                formData.append("upload_preset", "my_upload_preset"); // Make sure this is correct

                return fetch(`https://api.cloudinary.com/v1_1/drdggqz62/image/upload`, {
                    method: "POST",
                    body: formData,
                })
                    .then(response => {
                        console.log("Cloudinary response status:", response.status);
                        return response.json();
                    })
                    .then(data => {
                        console.log("Cloudinary response data:", data);
                        return data.secure_url;
                    })
                    .catch(error => {
                        console.error("Error uploading to Cloudinary:", error);
                        throw error;
                    });
            });

            return Promise.all(uploadPromises);
        }

        // ---- EDIT PRODUCT SECTION ---- //

        // Similar implementation for the edit product form
        let editCropper;
        let editCurrentFileIndex = 0;
        let editFilesToProcess = [];
        let editCroppedImages = [];

        document.getElementById('editProductImages').addEventListener('change', function (e) {
            editFilesToProcess = Array.from(e.target.files);

            if (editFilesToProcess.length > 4) {
                Swal.fire("Error", "Maximum 4 images allowed", "error");
                this.value = '';
                return;
            }

            // Start processing the first image
            if (editFilesToProcess.length > 0) {
                editCurrentFileIndex = 0;
                processNextEditImage();
            }
        });

        function processNextEditImage() {
            if (editCurrentFileIndex < editFilesToProcess.length) {
                const file = editFilesToProcess[editCurrentFileIndex];
                const reader = new FileReader();

                reader.onload = function (e) {
                    // Show the cropper container
                    const cropperContainer = document.getElementById('editImageCropperContainer');
                    cropperContainer.style.display = 'block';

                    // Set the image source
                    const image = document.getElementById('editImageToCrop');
                    image.src = e.target.result;

                    // Initialize cropper on the image
                    if (editCropper) {
                        editCropper.destroy();
                    }

                    editCropper = new Cropper(image, {
                        aspectRatio: 1, // Square crop
                        viewMode: 1,
                        responsive: true,
                        restore: false
                    });
                };

                reader.readAsDataURL(file);
            }
        }

        document.getElementById('editCropImageBtn').addEventListener('click', function () {
            if (!editCropper) return;

            // Get the cropped canvas
            const canvas = editCropper.getCroppedCanvas({
                width: 500,
                height: 500
            });

            // Convert canvas to blob
            canvas.toBlob(function (blob) {
                // Create a new File object from the blob
                const croppedFile = new File([blob], editFilesToProcess[editCurrentFileIndex].name, {
                    type: editFilesToProcess[editCurrentFileIndex].type,
                    lastModified: Date.now()
                });

                // Add to cropped images array
                editCroppedImages.push(croppedFile);

                // Add preview
                addEditCroppedImagePreview(canvas.toDataURL());

                // Move to next image or finish
                editCurrentFileIndex++;
                if (editCurrentFileIndex < editFilesToProcess.length) {
                    processNextEditImage();
                } else {
                    // Hide cropper when all images are processed
                    document.getElementById('editImageCropperContainer').style.display = 'none';
                    if (editCropper) {
                        editCropper.destroy();
                        editCropper = null;
                    }
                }
            }, editFilesToProcess[editCurrentFileIndex].type);
        });

        document.getElementById('editCancelCropBtn').addEventListener('click', function () {
            // Skip current image and move to next
            editCurrentFileIndex++;
            if (editCurrentFileIndex < editFilesToProcess.length) {
                processNextEditImage();
            } else {
                // Hide cropper when all images are processed
                document.getElementById('editImageCropperContainer').style.display = 'none';
                if (editCropper) {
                    editCropper.destroy();
                    editCropper = null;
                }
            }
        });

        function addEditCroppedImagePreview(dataUrl) {
            const previewContainer = document.getElementById('editCroppedImagesPreviews');
            const previewDiv = document.createElement('div');
            previewDiv.className = 'preview-item position-relative m-1';
            previewDiv.innerHTML = `
        <img src="${dataUrl}" alt="Preview image" 
             style="width: 80px; height: 80px; object-fit: cover;">
        <button type="button" class="btn btn-danger btn-sm position-absolute" 
                style="top: 0; right: 0; padding: 0 5px;" 
                onclick="removeEditCroppedImage(${editCroppedImages.length - 1})">Ã—</button>
    `;
            previewContainer.appendChild(previewDiv);
        }

        function removeEditCroppedImage(index) {
            editCroppedImages.splice(index, 1);
            refreshEditCroppedImagePreviews();
        }

        function refreshEditCroppedImagePreviews() {
            const previewContainer = document.getElementById('editCroppedImagesPreviews');
            previewContainer.innerHTML = '';

            editCroppedImages.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const previewDiv = document.createElement('div');
                    previewDiv.className = 'preview-item position-relative m-1';
                    previewDiv.innerHTML = `
                <img src="${e.target.result}" alt="Preview image" 
                     style="width: 80px; height: 80px; object-fit: cover;">
                <button type="button" class="btn btn-danger btn-sm position-absolute" 
                        style="top: 0; right: 0; padding: 0 5px;" 
                        onclick="removeEditCroppedImage(${index})">Ã—</button>
            `;
                    previewContainer.appendChild(previewDiv);
                };
                reader.readAsDataURL(file);
            });
        }

        // Update the edit product form submission
        document.getElementById("editProductForm").addEventListener("submit", async function (event) {
            event.preventDefault();

            const productId = document.getElementById("editProductId").value;
            const formData = new FormData(this);

            try {
                // Add cropped images if any
                if (editCroppedImages.length > 0) {
                    const uploadedImages = await uploadImagesToCloudinary(editCroppedImages);
                    uploadedImages.forEach(url => formData.append("imageUrls", url));
                }

                // Add images to remove
                if (imagesToRemove.length > 0) {
                    formData.append("removeImages", JSON.stringify(imagesToRemove));
                }

                const response = await fetch(`/admin/products/edit/${productId}`, {
                    method: "PATCH",
                    body: formData,
                });

                const data = await response.json();
                if (data.success) {
                    Swal.fire("Success", "Product updated successfully!", "success")
                        .then(() => location.reload());
                } else {
                    Swal.fire("Error", data.message || "Update failed", "error");
                }
            } catch (error) {
                console.error("Error updating product:", error);
                Swal.fire("Error", "Something went wrong while updating the product", "error");
            }
        });

        // Function to remove an existing image
        function removeExistingImage(index) {
            imagesToRemove.push(index);
            document.getElementById("editExistingImagesContainer").children[index].style.display = "none";
        }

        // Function to delete a product
        function deleteProduct(productId) {
            // Confirm deletion with the user
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Send delete request to the server
                    fetch(`/admin/products/${productId}`, {
                        method: 'DELETE',
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Deleted!',
                                    'Product has been deleted.',
                                    'success'
                                ).then(() => {
                                    // Reload the page to update the product list
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire(
                                    'Error!',
                                    data.message || 'Failed to delete product.',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'Something went wrong.',
                                'error'
                            );
                        });
                }
            });
        }

        // Function to edit a product
        function editProduct(productId) {
            // Reset the forms and previews
            document.getElementById('editProductForm').reset();
            document.getElementById('editExistingImagesContainer').innerHTML = '';
            document.getElementById('editCroppedImagesPreviews').innerHTML = '';
            editCroppedImages = [];
            imagesToRemove = [];

            // Set the form action
            document.getElementById('editProductForm').action = `/admin/products/edit/${productId}`;
            document.getElementById('editProductId').value = productId;

            // Fetch product data
            fetch(`/admin/products/${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const product = data.product;

                        // Populate form fields
                        document.getElementById('editProductName').value = product.name;
                        document.getElementById('editProductBrand').value = product.brand;
                        document.getElementById('editProductDescription').value = product.description;
                        document.getElementById('editProductSpecification').value = product.specifications;
                        document.getElementById('editProductPrice').value = product.price;
                        document.getElementById('editProductStock').value = product.stock;

                        // Set category
                        if (product.category) {
                            document.getElementById('editProductCategory').value = product.category._id;
                        }

                        // Display existing images
                        const imagesContainer = document.getElementById('editExistingImagesContainer');
                        imagesContainer.innerHTML = '';

                        if (product.images && product.images.length > 0) {
                            product.images.forEach((image, index) => {
                                const imageDiv = document.createElement('div');
                                imageDiv.className = 'position-relative m-2';
                                imageDiv.innerHTML = `
                            <img src="${image.url}" alt="Product image" 
                                style="width: 100px; height: 100px; object-fit: cover;">
                            <button type="button" class="btn btn-danger btn-sm position-absolute" 
                                    style="top: 0; right: 0; padding: 0 5px;" 
                                    onclick="removeExistingImage(${index})">Ã—</button>
                        `;
                                imagesContainer.appendChild(imageDiv);
                            });
                        }

                        // Show the modal
                        const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
                        editModal.show();
                    } else {
                        Swal.fire('Error', data.message || 'Failed to load product data', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error fetching product data:', error);
                    Swal.fire('Error', 'Something went wrong while loading product data', 'error');
                });
        }
    </script>

    <%- include('partials/admin/footer') %>